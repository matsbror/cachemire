/* barrier(<monitor>,<nprocs>)
*/
define(BARRIER,`{
    register int *lockAddr;
    trap(ENTER_BARRIER, &($1));
    ST_LOG(ST_BAR_ENTER, lockAddr)
    MENTER($1,0)
    if ($1[0].count[0] < ($2 - 1)){
        DELAY($1,0,0)
        ST_LOG(ST_BAR_EXIT, lockAddr)
    } else {
        ST_LOG(ST_BAR_EXIT_LAST, lockAddr)
    }
    CONTINUE($1,0,0)
    MEXIT($1,0)
    trap(EXIT_BARRIER, &($1));
}')

/* bardec(<monitor>)
*/
define(BARDEC,
          `DECVAR($1,1,1)'
      )

/* barinit(<monitor>)
*/
define(BARINIT,`{
  MONINIT($1,1,1)
  ST_INFO_INIT($1, ST_BAR_LOCK, &($1[0].lock) )
  ST_INFO_INIT($1, ST_BAR_QUEUE, &($1[0].queue[0]) )
  ST_LOG(ST_BAR_INIT, (int *)&($1[0].lock))
  }')

define(gsspec,
          `int sub;'
      )

/* gsdec(<monitor>)
*/
define(GSDEC,
         `DECVAR($1,1,1,GSSPEC)'
      )

/* gsinit(<monitor>)
*/
define(GSINIT,`{
	  MONINIT($1,1,1)
          $1[0].sub = 0;
}')

/* getsub($1<monitor>,$2<subscript>,$3<max_sub>,$4<nprocs>,$5<chunk>)
*/
define(GETSUB,`{
	  MENTER($1,0)
          if ($1[0].sub <= $3)
          {
              $2 = $1[0].sub;
	      $1[0].sub += ifelse($5,,1,$5);
          }
          else
          {
              $2 = -1;
              if ($1[0].count[0] < ($4 - 1))
              {
                  DELAY($1,0,0)
              }
              else
                  $1[0].sub = 0;
              CONTINUE($1,0,0)
          }
          MEXIT($1,0)
}')



/* nlockdec(<monitor>)
*/
define(LOCKDEC,
          `XXDECLOCK($1)'
      )

/* nlockinit(<monitor>)
*/
define(LOCKINIT,`{
  XXLOCKINIT($1);
  }')

/* nlock(<monitor>)
*/
define(LOCK,`{
  XXLOCK($1);
  }')

/* nunlock(<monitor>)
*/
define(UNLOCK, `{
  XXUNLOCK($1);
  }')

define(ALOCKDEC,
          `DECVAR($1,0,$2)'
      )

define(ALOCKINIT,`{
  MONINIT($1,0,$2)
  }')

define(ALOCK,`{
  MENTER($1,$2)
  '})

define(AULOCK,`{
  MEXIT($1,$2)
  }')


define(ASPEC, `
          int pgdone;
          int pbdone;
')

define(ADEC, `DECVAR($1,1,1,ASPEC)')

define(AINIT, `{
           MONINIT($1,1,1)
           $1[0].pgdone = $1[0].pbdone = 0;
}')

define(ASKFOR, `{
	   MENTER($1,0)
           if (($1[0].pgdone == 0) && ($1[0].pbdone != 0))
           {
               if ($1[0].count[0] < ($3 - 1))
               {
                   DELAY($1,0,0)
               }
           }
           else
           {
               $2 = -2;
               while (($1[0].pgdone == 0) && ($1[0].pbdone == 0))
               {
                   $4
                   if ($2 == 0)
                   {
                       CONTINUE($1,0,0)
                   }
                   else
                   {
                       if ($1[0].count[0] == ($3 - 1))
                       {
                           $1[0].pbdone = 1;
                       }
                       else
                       {
                           DELAY($1,0,0)
                       }
                   }
               }
           }
           if ($1[0].pgdone != 0)
           {
               $2 = -1;
               CONTINUE($1,0,0)
           }
           else
           {
               $2 = $1[0].pbdone;
               if ($1[0].count[0] == 0)
               {
                   $5
                   $1[0].pbdone = 0;
               }
               CONTINUE($1,0,0)
           }
           MEXIT($1,0)
}')

define(PROBEND, `{
           MENTER($1,0)
           $1[0].pbdone = $2;
           MEXIT($1,0)
}')

define(PROGEND, `{
           MENTER($1,0)
           $1[0].pgdone = 1;
	   MAIN_END
           CONTINUE($1,0,0)
           MEXIT($1,0)
}')

define(PAUSEDEC, `DECVAR($1,2,ifelse($2,,1,$2),int flag;)')

define(PAUSEINIT,
`{
  int p_dummy;

  for (p_dummy = 0; (p_dummy < ifelse($2,,1,$2)); p_dummy++)
    $1[p_dummy].flag = 0;
  MONINIT($1,2,ifelse($2,,1,$2))
}')

define(CLEARPAUSE,
`{
  register int *lockAddr;

  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_EVENT_ENTER, lockAddr )
  MENTER($1,ifelse($2,,0,$2))
  $1[ifelse($2,,0,$2)].flag = 0;
  CONTINUE($1,0,ifelse($2,,0,$2))
  MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_EVENT_EXIT, lockAddr)
}')

define(SETPAUSE,
`{
  register int *lockAddr;

  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_EVENT_ENTER, lockAddr )
  MENTER($1,ifelse($2,,0,$2))
  $1[ifelse($2,,0,$2)].flag = 1;
  CONTINUE($1,0,ifelse($2,,0,$2))
  MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_EVENT_EXIT, lockAddr)
}')

define(WAITPAUSE,
`{
  register int *lockAddr;

  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_PAUSE_ENTER,lockAddr)
  MENTER($1,ifelse($2,,0,$2))
  if (!$1[ifelse($2,,0,$2)].flag) {
    DELAY($1,0,ifelse($2,,0,$2))
  }
  CONTINUE($1,0,ifelse($2,,0,$2))
  MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_PAUSE_EXIT,lockAddr)
}')

define(PAUSE,
`{
  register int *lockAddr;
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_PAUSE_ENTER, lockAddr )
  MENTER($1,ifelse($2,,0,$2))
  if (!$1[ifelse($2,,0,$2)].flag) {
    DELAY($1,1,ifelse($2,,0,$2))
  }
  $1[ifelse($2,,0,$2)].flag = 0;
  CONTINUE($1,0,ifelse($2,,0,$2))
  MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_PAUSE_EXIT, lockAddr )
}')
