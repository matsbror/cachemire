%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
%	/setglobal {(setglobal) FMBADEPSF} def
%	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
%	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612.57 792.28 0 1 18 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Helvetica-Bold FMFONTDEFINE
6 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "41" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(41) 292.28 38.47 T
51.87 80.93 289.63 576.14 R
7 X
V
1 11 Q
0 X
(Abstract) 150.29 568.81 T
2 10 Q
2.1 (The appr) 63.89 556.47 P
2.1 (oach of pr) 102.01 556.47 P
2.1 (ogram-driven simulation of multi-) 146.95 556.47 P
1.37 (pr) 51.87 544.67 P
1.37 (ocessors has generally been believed to be too slow in) 60.39 544.67 P
0.06 (or) 51.87 532.87 P
0.06 (der to perform experiments and performance evaluations) 60.39 532.87 P
(with r) 51.87 521.07 T
(ealistic workloads.) 75.12 521.07 T
0.22 (W) 63.89 509.27 P
0.22 (e show that the pr) 71.3 509.27 P
0.22 (ogram-driven appr) 143.5 509.27 P
0.22 (oach for building) 219.73 509.27 P
2.51 (multipr) 51.87 497.47 P
2.51 (ocessor simulators is indeed a viable method. It) 80.95 497.47 P
-0.14 (compar) 51.87 485.67 P
-0.14 (es well in performance to an execution-driven simu-) 82.05 485.67 P
1.81 (lator which has been r) 51.87 473.87 P
1.81 (eported in the literatur) 148.74 473.87 P
1.81 (e, and has) 245.18 473.87 P
(superior \337exibility) 51.87 462.07 T
(.) 124.93 462.07 T
0.11 (The r) 63.89 450.27 P
0.11 (eported simulator is the cor) 85.03 450.27 P
0.11 (e in the CacheMir) 196.22 450.27 P
0.11 (e test) 268.68 450.27 P
1 (bench which is an entir) 51.87 438.47 P
1 (e envir) 148.82 438.47 P
1 (onment for conducting per-) 176.93 438.47 P
1.26 (formance evaluations on shar) 51.87 426.67 P
1.26 (ed memory multipr) 174.44 426.67 P
1.26 (ocessors.) 252.69 426.67 P
1.17 (The test bench is used in a number of pr) 51.87 414.87 P
1.17 (ojects, including) 222.35 414.87 P
-0.18 (cache coher) 51.87 403.07 P
-0.18 (ence pr) 99.92 403.07 P
-0.18 (otocol evaluation, super) 129.08 403.07 P
-0.18 (-pipelined pr) 225.47 403.07 P
-0.18 (oc-) 276.86 403.07 P
(essor design and analysis of parallel pr) 51.87 391.27 T
(ogram behaviour) 209.84 391.27 T
(.) 277.89 391.27 T
1 12 Q
(1) 51.87 361.34 T
(Intr) 64.12 361.34 T
(oduction) 84.57 361.34 T
0 10 Q
-0 (During the development of a new computer system, per-) 63.86 343.67 P
0.33 (formance evaluations have to be made continuously) 51.87 331.87 P
0.33 (. In the) 260.93 331.87 P
2.31 (early stage of development,) 51.87 320.07 P
2 F
2.31 (analytical models) 174.12 320.07 P
0 F
2.31 ( are often) 247.26 320.07 P
0.96 (used to get a coarse estimation of performance. However) 51.87 308.27 P
0.96 (,) 287.13 308.27 P
1.21 (because of the dif) 51.87 296.47 P
1.21 (\336culty in capturing the dynamic behav-) 126.12 296.47 P
0.64 (iour of the system, the applicability of this technique is so) 51.87 284.67 P
0.61 (far limited to either very simple systems or for rough esti-) 51.87 272.87 P
(mates.) 51.87 261.07 T
1.02 (T) 63.86 249.27 P
1.02 (o build) 69.27 249.27 P
2 F
1.02 (pr) 101.88 249.27 P
1.02 (ototypes) 110.4 249.27 P
0 F
1.02 (, on which measurements are done,) 143.73 249.27 P
2.42 (gives the most data on real performance. However) 51.87 237.47 P
2.42 (, the) 269.99 237.47 P
0.92 (design considerations must already have been made when) 51.87 225.67 P
1.19 (the building starts, so this approach is mostly used at the) 51.87 213.87 P
(\336nal phase of the development.) 51.87 202.07 T
-0.13 (Therefore, when investigating various dif) 63.86 190.27 P
-0.13 (ferent architec-) 228.96 190.27 P
1.22 (tural features,) 51.87 178.47 P
2 F
1.22 (simulation modelling) 111.79 178.47 P
0 F
1.22 ( is often used for per-) 197.74 178.47 P
2.7 (formance evaluation. A simulation model can be made) 51.87 166.67 P
2.42 (accurate, but still \337exible enough to investigate a lar) 51.87 154.87 P
2.42 (ge) 280.19 154.87 P
(design space.) 51.87 143.07 T
0.92 (Multiprocessor architectures, which have a potential of) 63.86 131.27 P
0.93 (providing cost-ef) 51.87 119.47 P
0.93 (fective performance, are a lot more dif) 121.22 119.47 P
0.93 (\336-) 280.74 119.47 P
0.17 (cult to model than single processor systems due to the very) 51.87 107.67 P
0.05 (complex interaction between the architecture and the paral-) 51.87 95.87 P
307.63 80.93 545.39 576.14 R
7 X
V
0 X
0.45 (lel program behaviour) 307.63 569.47 P
0.45 (. Even though the approach of simu-) 396.86 569.47 P
8.52 (lation has been widely used for multiprocessor) 307.63 557.67 P
0.4 (performance evaluations, the simulation tools used for sin-) 307.63 545.87 P
2.5 (gle processor systems have in most cases not provided) 307.63 534.07 P
2.74 (enough information to perform accurate evaluations, or) 307.63 522.27 P
(been ef) 307.63 510.47 T
(fective enough to use realistically sized workloads.) 336.6 510.47 T
1.29 (In this paper we present the CacheMire test bench for) 319.62 498.67 P
1.39 (performance evaluations and measurements of multiproc-) 307.63 486.87 P
0.64 (essor architectures. The core of the test bench is a \337exible) 307.63 475.07 P
4.45 (program-driven simulator) 307.63 463.27 P
4.45 (, ef) 414.72 463.27 P
4.45 (\336cient enough to execute) 431.77 463.27 P
1.5 (entire parallel programs as workload. The test bench has) 307.63 451.47 P
0.45 (shown itself to be a very useful tool for quantitative meas-) 307.63 439.67 P
(urements of shared memory multiprocessor architectures.) 307.63 427.87 T
1 11 Q
(1.1  Backgr) 307.63 410.41 T
(ound) 360.9 410.41 T
0 10 Q
0.06 (W) 319.62 393.07 P
0.06 (e will in the following consider shared memory multi-) 328.26 393.07 P
0.67 (processors as tar) 307.63 381.27 P
0.67 (get architectures. The concepts of simula-) 374.87 381.27 P
-0.17 (tion discussed in the paper are, however) 307.63 369.47 P
-0.17 (, independent of the) 466.46 369.47 P
(memory model.) 307.63 357.67 T
1.64 (W) 319.62 345.87 P
1.64 (ith modern processor architectures, the most crucial) 328.66 345.87 P
-0.03 (part of a shared memory multiprocessor is the memory sys-) 307.63 334.07 P
1.18 (tem. For a high processor utilization, the memory system) 307.63 322.27 P
1.34 (must be able to serve the processors with several tens of) 307.63 310.47 P
(millions memory references per second and processor) 307.63 298.67 T
(.) 522.58 298.67 T
-0.24 (A simulation model for performance evaluation of mem-) 319.62 286.87 P
0.49 (ory systems for multiprocessors generally consists of: \050i\051 a) 307.63 275.07 P
1.26 (memory reference generator for each processor and \050ii\051 a) 307.63 263.27 P
0.45 (simulator of the memory system. Four techniques exist for) 307.63 251.47 P
(generating the memory references [1) 307.63 239.67 T
(1]:) 454.43 239.67 T
(\245) 319.62 227.87 T
2 F
5.31 (Distribution-driven simulation) 331.63 227.87 P
0 F
5.31 (. The workload is) 459.45 227.87 P
0.33 (modelled by a stochastic model of the distribution of) 331.64 215.87 P
(memory references.) 331.64 203.87 T
(\245) 319.62 191.87 T
2 F
1.98 (T) 331.63 191.87 P
1.98 (race-driven simulation) 336.64 191.87 P
0 F
1.98 (. A trace of memory refer-) 430 191.87 P
1.52 (ences is generated) 331.64 179.87 P
2 F
1.52 (once) 411.44 179.87 P
0 F
1.52 ( by means of executing the) 430.32 179.87 P
-0.15 (workload on a machine similar to the tar) 331.64 167.87 P
-0.15 (get system or) 492.35 167.87 P
(by using a functional simulator) 331.64 155.87 T
(.) 455.53 155.87 T
(\245) 319.62 143.87 T
2 F
2.09 (Execution-driven simulation) 331.63 143.87 P
0 F
2.09 (. The workload is exe-) 447.32 143.87 P
0.94 (cuted on a host computer) 331.64 131.87 P
0.94 (. At events of interest, e.g.) 435.4 131.87 P
1.61 (shared memory references, control is transferred to) 331.64 119.87 P
-0.07 (the simulation software, which simulates the memory) 331.64 107.87 P
(system.) 331.64 95.87 T
54.28 594.14 540.28 693.14 R
7 X
V
1 14 Q
0 X
(The CacheMir) 207.45 683.81 T
(e T) 294.69 683.81 T
(est Bench \321) 312.45 683.81 T
(A Flexible and Effective Appr) 89.68 665.81 T
(oach for Simulation of  Multipr) 268.31 665.81 T
(ocessors) 455.9 665.81 T
0 12 Q
(Mats Brorsson, Fredrik Dahlgren, H\214kan Nilsson, and Per Stenstr\232m) 132.13 635.14 T
(Department of Computer Engineering, Lund University) 163.63 619.14 T
(P) 200.51 603.14 T
(.O. Box 1) 205.85 603.14 T
(18, S-221 00 LUND, Sweden) 252.07 603.14 T
53.48 732.05 542.08 762.59 R
7 X
V
0 X
(In Proceedings of the 26th Annual Simulation Symposium, March 29-31, 1993) 53.48 754.59 T
(Arlington, U.S.A., pp. 41 - 49.) 53.48 740.59 T
54.28 18.14 252.28 36.14 R
7 X
V
0 10 Q
0 X
(0272-4715/93 $3.00) 54.28 29.47 T
3 F
(\343) 137.89 29.47 T
0 F
( 1993 IEEE) 145.79 29.47 T
FMENDPAGE
%%EndPage: "41" 1
%%Page: "42" 2
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(42) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
(\245) 63.86 713.47 T
2 F
0.72 (Pr) 75.87 713.47 P
0.72 (ogram-driven simulation) 85.5 713.47 P
0 F
0.72 (. Both processors and the) 185.94 713.47 P
1.52 (memory system of the tar) 75.88 701.47 P
1.52 (get system are simulated.) 183.98 701.47 P
1.45 (The workload is executed on the simulated proces-) 75.88 689.47 P
(sors.) 75.88 677.47 T
3.03 (The method of distribution-driven simulation suf) 63.86 665.47 P
3.03 (fers) 274.64 665.47 P
0.06 (mainly from the lack of good stochastic models of real par-) 51.87 653.67 P
2.35 (allel programs. In addition, this method, as well as the) 51.87 641.87 P
0.8 (trace-driven method, does not have any feedback between) 51.87 630.07 P
1.71 (the memory system architecture and the program behav-) 51.87 618.27 P
1.5 (iour) 51.87 606.47 P
1.5 (. This may lead to considerable discrepancies in per-) 67.43 606.47 P
0.38 (formance estimation compared to execution- and program-) 51.87 594.67 P
1.74 (driven simulation since in these cases the workloads are) 51.87 582.87 P
0.45 (allowed to behave dif) 51.87 571.07 P
0.45 (ferently as a consequence of changes) 139.4 571.07 P
(in the timing of memory references [7].) 51.87 559.27 T
1.56 (Due to the simulation of entire instruction set proces-) 63.86 547.47 P
0.23 (sors, program-driven simulation is very computation inten-) 51.87 535.67 P
1.86 (sive. W) 51.87 523.87 P
1.86 (ork on simulation techniques has therefore lately) 83.49 523.87 P
1.67 (been focused on) 51.87 512.07 P
2 F
1.67 (execution-driven simulation) 124.36 512.07 P
0 F
1.67 ( [9, 15, 22].) 237.96 512.07 P
0.91 (The processes of the workload application program are in) 51.87 500.27 P
5.62 (this case executed \050pseudo\051-concurrently as separate) 51.87 488.47 P
0.68 (threads of control on a host computer system. This execu-) 51.87 476.67 P
0.71 (tion is without slow-down \050except for the lack of parallel-) 51.87 464.87 P
2.19 (ism\051. At prede\336ned events of interest, such as a shared) 51.87 453.07 P
0.96 (memory reference, control is transferred to the simulation) 51.87 441.27 P
0.44 (software which synchronises all processes of the workload) 51.87 429.47 P
(and simulates the memory system.) 51.87 417.67 T
0.57 (This approach has the big advantage of being very ef) 63.86 405.87 P
0.57 (\336-) 280.74 405.87 P
0.71 (cient if the application program can execute for long peri-) 51.87 394.07 P
1.84 (ods between global events of interest. This advantage is) 51.87 382.27 P
0.84 (highly dependent on the sharing behaviour of the applica-) 51.87 370.47 P
0.47 (tion program. The main drawback is the lack of \337exibility) 51.87 358.67 P
0.47 (.) 287.13 358.67 P
1.34 (The processor architecture is \336xed to the one of the host) 51.87 346.87 P
1.26 (computer and the operating system has to be modi\336ed in) 51.87 335.07 P
0.42 (order to transfer control from the user application program) 51.87 323.27 P
0.68 (to the memory system simulator) 51.87 311.47 P
0.68 (. If the number of instruc-) 182.93 311.47 P
2.21 (tions between each global event is small, the ef) 51.87 299.67 P
2.21 (\336ciency) 257.97 299.67 P
(bene\336ts of execution-driven simulation will diminish.) 51.87 287.87 T
0.47 (In) 63.86 276.07 P
2 F
0.47 (pr) 75.17 276.07 P
0.47 (ogram-driven simulation) 83.69 276.07 P
0 F
0.47 ( \050sometimes referred to as) 183.88 276.07 P
4.78 (instruction-driven simulation\051, each instruction of the) 51.87 264.27 P
-0.21 (application program is interpreted by an instruction set sim-) 51.87 252.47 P
-0.19 (ulator of the processor) 51.87 240.67 P
-0.19 (. While this approach has been used a) 140.45 240.67 P
0.58 (few times in the past [2, 19], it has generally been consid-) 51.87 228.87 P
0.35 (ered too time consuming for execution of entire workloads) 51.87 217.07 P
2.48 (due to the interpretation of every instruction. However) 51.87 205.27 P
2.48 (,) 287.13 205.27 P
0.26 (with the emer) 51.87 193.47 P
0.26 (gence of high performance and cost-ef) 107.2 193.47 P
0.26 (fective) 262.42 193.47 P
2.59 (computers, such as the common workstation, combined) 51.87 181.67 P
1.55 (with the simpler instruction sets of modern microproces-) 51.87 169.87 P
-0.08 (sors, this approach has started to gain interest. It is the most) 51.87 158.07 P
3.34 (\337exible and accurate approach of the four techniques.) 51.87 146.27 P
1.19 (Changes in the processor architecture can easily be made) 51.87 134.47 P
(and the timing model can be made arbitrarily precise.) 51.87 122.67 T
307.63 80.93 545.39 720.14 R
7 X
V
1 11 Q
0 X
(1.2  Motivation) 307.63 712.81 T
0 10 Q
-0.18 (The main motivation behind the CacheMire test bench is) 319.62 695.47 P
0.17 (based on the type of experiments that was anticipated to be) 307.63 683.67 P
(carried out.) 307.63 671.87 T
2.22 (At the department of Computer Engineering at Lund) 319.62 660.07 P
1.25 (University) 307.63 648.27 P
1.25 (, one of the main research topics is focused on) 349.2 648.27 P
-0.02 (shared memory multiprocessors. W) 307.63 636.47 P
-0.02 (ithin this topic, research) 449.36 636.47 P
-0.1 (is conducted in diverse areas; from coherent cache systems,) 307.63 624.67 P
1.67 (compiler design, and consistency models to parallel pro-) 307.63 612.87 P
1.67 (gram behaviour) 307.63 601.07 P
1.67 (. Experimental methods are used for per-) 371.79 601.07 P
1.53 (formance evaluations and measurements. Because of this) 307.63 589.27 P
-0.18 (diverse nature of research areas, a \337exible but still powerful) 307.63 577.47 P
(tool was needed to satisfy various kinds of experiments.) 307.63 565.67 T
2.44 (Both execution- and program-driven simulation tech-) 319.62 553.87 P
2.62 (niques were considered to ful\336l the needs of accuracy) 307.63 542.07 P
2.62 (.) 542.89 542.07 P
2.82 (While it has been demonstrated clearly that execution-) 307.63 530.27 P
1.62 (driven simulation can be done with enough ef) 307.63 518.47 P
1.62 (\336ciency to) 501.83 518.47 P
1.83 (execute entire applications of reasonable sizes, the same) 307.63 506.67 P
2.42 (had to be veri\336ed for program-driven simulation which) 307.63 494.87 P
1.36 (generally has been considered to be too time consuming.) 307.63 483.07 P
1.15 (Recent techniques for ef) 307.63 471.27 P
1.15 (\336cient instruction set architecture) 408.36 471.27 P
1.76 (simulation have shown that it is feasible to simulate the) 307.63 459.47 P
(processors as well as the memory system [4].) 307.63 447.67 T
0.48 (The \337exibility issue that is most important is the ability) 319.62 435.87 P
1.15 (to simulate just as much as needed for a particular study) 307.63 424.07 P
1.15 (.) 542.89 424.07 P
-0.07 (Secondly) 307.63 412.27 P
-0.07 (, it is important to be able to experiment with vari-) 344.2 412.27 P
1.63 (ous processor architectures. It should also be possible to) 307.63 400.47 P
1.18 (con\336gure the test bench for new experiments without too) 307.63 388.67 P
0.49 (much dif) 307.63 376.87 P
0.49 (\336culty) 343.77 376.87 P
0.49 (. In order to utilize the available computing) 368.68 376.87 P
0.04 (resource, consisting of a network of workstations from var-) 307.63 365.07 P
(ious manufacturers, the test bench has to be portable.) 307.63 353.27 T
0.81 (All this together) 319.62 341.47 P
0.81 (, it was considered most appropriate to) 385.84 341.47 P
0.71 (develop a program-driven simulator as the core of the test) 307.63 329.67 P
0.86 (bench. Such a simulator is easily implemented as a single) 307.63 317.87 P
0.7 (program which does not require additions in the operating) 307.63 306.07 P
2.01 (system. In contrast, the operating system has to support) 307.63 294.27 P
0.35 (transfer of control between the workload programs and the) 307.63 282.47 P
2.89 (simulator when using execution-driven simulation. Pro-) 307.63 270.67 P
1.07 (gram-driven simulation also opens up for realistic experi-) 307.63 258.87 P
5.68 (ments with dif) 307.63 247.07 P
5.68 (ferent instruction set architectures in) 376.59 247.07 P
0.33 (multiprocessor environments, something which is impossi-) 307.63 235.27 P
(ble with execution-driven simulation.) 307.63 223.47 T
0.24 (The result, the CacheMire test bench, is an environment) 319.62 211.67 P
2.69 (for conducting experiments with shared memory multi-) 307.63 199.87 P
0 (processor architectures. The minimal simulator implements) 307.63 188.07 P
0.49 (a shared memory multiprocessor with a number of proces-) 307.63 176.27 P
1.23 (sors issuing memory references to a shared memory) 307.63 164.47 P
1.23 (. The) 523.6 164.47 P
2.14 (processors are instruction set simulators of the SP) 307.63 152.67 P
2.14 (ARC) 520.83 152.67 P
0 8 Q
1.71 (1) 541.39 156.67 P
0 10 Q
1.67 (processor) 307.63 140.87 P
1.67 (. The user can either accurately model memory) 345.4 140.87 P
1.63 (accesses for all memory references, including instruction) 307.63 129.07 P
307.63 93.93 545.39 114.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
307.63 101.92 439.61 101.92 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0.28 0.14 612.28 792.14 C
0 8 Q
0 X
0 0 0 1 0 0 0 K
(1.   SP) 307.63 88.59 T
(ARC is a registered trademark of SP) 327.79 88.59 T
(ARC International, Inc.) 443.93 88.59 T
FMENDPAGE
%%EndPage: "42" 2
%%Page: "43" 3
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(43) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
0.28 (fetches, or only model data references. By tagging areas of) 51.87 713.47 P
1.01 (memory with user de\336ned attributes, accesses to any spe-) 51.87 701.67 P
(ci\336c memory area can be traced.) 51.87 689.87 T
0.88 (The rest of the paper is or) 63.86 678.07 P
0.88 (ganised as follows: The next) 171.69 678.07 P
0.2 (section describes the structure of the program-driven simu-) 51.87 666.27 P
1.34 (lator and the application programming environment. Sec-) 51.87 654.47 P
0.59 (tion 3 describes how this basic simulator model easily can) 51.87 642.67 P
1 (be extended to accommodate accurate simulation of com-) 51.87 630.87 P
1.59 (plex memory systems. Section 4 presents some perform-) 51.87 619.07 P
5.23 (ance measurements of the simulator) 51.87 607.27 P
5.23 (. Some ongoing) 216.11 607.27 P
-0.2 (research projects using the CacheMire test bench are brie\337y) 51.87 595.47 P
1.39 (reviewed in Section 5 and the paper is concluded after a) 51.87 583.67 P
(summary) 51.87 571.87 T
(.) 88.44 571.87 T
1 12 Q
(2) 51.87 553.74 T
(Structur) 64.12 553.74 T
(e of the CacheMir) 107.89 553.74 T
(e test bench) 199.98 553.74 T
0 10 Q
1.7 (The CacheMire test bench consists of a minimal pro-) 63.86 536.07 P
2.34 (gram-driven simulator and a programming environment.) 51.87 524.27 P
0.19 (The minimal simulator is divided into a processor kernel, a) 51.87 512.47 P
(simulated memory and a multiprocessor framework.) 51.87 500.67 T
0.66 (W) 63.86 488.87 P
0.66 (e will in this section describe the various parts of the) 72.5 488.87 P
1.94 (test bench including a short description on how the test) 51.87 477.07 P
(bench is used for practical experiments.) 51.87 465.27 T
1 11 Q
(2.1  Pr) 51.87 447.81 T
(ocessor kernel) 82.53 447.81 T
0 10 Q
1.42 (The processor kernel is a highly optimized instruction) 63.86 430.47 P
2.2 (set simulator of the SP) 51.87 418.67 P
2.2 (ARC processor architecture [20].) 150.3 418.67 P
0.37 (The interface of a processor consists of the) 51.87 406.87 P
2 F
0.37 (pr) 228.7 406.87 P
0.37 (ocessor id) 237.22 406.87 P
0 F
0.37 ( of) 278.43 406.87 P
3.09 (the current processor) 51.87 395.07 P
3.09 (, the) 141.51 395.07 P
2 F
3.09 (virtual addr) 167.4 395.07 P
3.09 (ess) 218.18 395.07 P
0 F
3.09 (,) 230.4 395.07 P
2 F
3.09 (32-bits data) 238.48 395.07 P
2.26 (wor) 51.87 383.27 P
2.26 (d) 67.06 383.27 P
0 F
2.26 (,) 72.06 383.27 P
2 F
2.26 (memory operation) 79.32 383.27 P
0 F
2.26 ( \050Read, W) 155.17 383.27 P
2.26 (rite, or atomic Read-) 200.1 383.27 P
0.22 (Modify-W) 51.87 371.47 P
0.22 (rite \050RMW\051\051, and a) 94.24 371.47 P
2 F
0.22 (byte mask) 174.83 371.47 P
0 F
0.22 ( \050specifying which) 214.76 371.47 P
0.28 (bytes, within a word, will be written in a byte or half-word) 51.87 359.67 P
(store operation\051.) 51.87 347.87 T
0.67 (The instruction set simulator is written in C and imple-) 63.86 336.07 P
1.43 (ments all instructions generated by the Sun) 51.87 324.27 P
0 8 Q
1.14 (2) 232.66 328.27 P
0 10 Q
1.43 (/SP) 236.66 324.27 P
1.43 (ARC-ver-) 249.64 324.27 P
-0 (sion of the GCC compiler) 51.87 312.47 P
-0 (. A few optional instructions such) 154.65 312.47 P
1.55 (as the integer multiply/divide and square root instruction) 51.87 300.67 P
1.73 (are not implemented. Some of these are used for imple-) 51.87 288.87 P
(menting synchronisation primitives.) 51.87 277.07 T
1.6 (The processor kernel is operated by means of two C-) 63.86 265.27 P
0.7 (functions:) 51.87 253.47 P
4 F
1.69 (InitSparc) 95.08 253.47 P
0 F
0.7 ( and) 149.08 253.47 P
4 F
1.69 (SparcCycle) 169.93 253.47 P
0 F
0.7 (.) 229.93 253.47 P
4 F
1.69 (InitSparc) 235.63 253.47 P
0 F
-0.14 (initiates the processor by creating the state information area) 51.87 241.67 P
1.55 (which contains register contents and other state informa-) 51.87 229.87 P
0.12 (tion. The program counter is initiated with the start address) 51.87 218.07 P
0.9 (of the \336rst instruction to execute and the designated stack) 51.87 206.27 P
-0.19 (pointer is initiated to a user de\336ned start value. A parameter) 51.87 194.47 P
0.26 (to) 51.87 182.67 P
4 F
0.63 (InitSparc) 62.42 182.67 P
0 F
0.26 ( determines whether instruction fetches are) 116.42 182.67 P
0.48 (visible or if only data references will be seen by the mem-) 51.87 170.87 P
(ory system.) 51.87 159.07 T
0.88 (A) 63.86 147.27 P
2 F
0.88 (pr) 74.46 147.27 P
0.88 (ocessor cycle) 82.98 147.27 P
0 F
0.88 ( consists of an instruction fetch, exe-) 137.45 147.27 P
2.05 (cution of the instruction and an optional data reference.) 51.87 135.47 P
0.77 (Execution of the application program is advanced by call-) 51.87 123.67 P
51.87 93.93 289.63 114.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
51.87 101.92 183.85 101.92 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0.28 0.14 612.28 792.14 C
0 8 Q
0 X
0 0 0 1 0 0 0 K
(2.  Sun is a registered trademark of Sun Microsystems, Inc.) 51.87 88.59 T
307.63 80.93 545.39 720.14 R
7 X
V
0 10 Q
0 X
2.07 (ing the) 307.63 713.47 P
4 F
4.96 (SparcCycle) 341.76 713.47 P
0 F
2.07 ( routine. If instruction fetches are) 401.76 713.47 P
0.6 (simulated, each invocation of) 307.63 701.67 P
4 F
1.45 (SparcCycle) 430.31 701.67 P
0 F
0.6 ( advances the) 490.31 701.67 P
0.16 (simulator to the next memory reference, instruction fetches) 307.63 689.87 P
1.71 (included. A processor cycle may then require more than) 307.63 678.07 P
1.99 (one invocation of) 307.63 666.27 P
4 F
4.79 (SparcCycle) 386.1 666.27 P
0 F
1.99 (. Between each invoca-) 446.1 666.27 P
0.73 (tion, the processor state stores information on whether the) 307.63 654.47 P
(processor waits for an instruction or for data.) 307.63 642.67 T
3.45 (If instruction fetches are invisible, the processor is) 319.62 630.87 P
0.71 (advanced a number of processor cycles until the next data) 307.63 619.07 P
2.7 (reference. A return parameter gives information on the) 307.63 607.27 P
(number of advanced processor cycles.) 307.63 595.47 T
0.16 (Three memory operations are required by the processor:) 319.62 583.67 P
2 F
0.33 (Read) 307.63 571.87 P
0 F
0.33 (,) 328.18 571.87 P
2 F
0.33 (W) 333.51 571.87 P
0.33 (rite) 341.29 571.87 P
0 F
0.33 ( and) 355.18 571.87 P
2 F
0.33 (atomic Read-Modify-W) 375.27 571.87 P
0.33 (rite) 468.64 571.87 P
0 F
0.33 ( \050RMW\051 opera-) 482.53 571.87 P
0.09 (tions. The latter operation writes a value to a memory loca-) 307.63 560.07 P
0.06 (tion and expects the old contents of the memory location in) 307.63 548.27 P
-0.08 (return to the processor in a single indivisible operation. It is) 307.63 536.47 P
1.57 (implemented by using the opcode of one of the optional) 307.63 524.67 P
(instructions.) 307.63 512.87 T
1 11 Q
(2.2  Memory model) 307.63 495.41 T
0 10 Q
3.84 (The simulated memory implements a shared linear) 319.62 478.07 P
0.28 (address space whose size is determined during initiation of) 307.63 466.27 P
-0.03 (the simulator) 307.63 454.47 P
-0.03 (. The three memory operations required by the) 359.55 454.47 P
0.52 (processor are supported by the memory model. The RMW) 307.63 442.67 P
2.09 (operation is implemented as a combined read and write) 307.63 430.87 P
1.03 (operation in the memory) 307.63 419.07 P
1.03 (. The shared address space is, by) 408.67 419.07 P
0.66 (default, logically divided into 4 kilo-byte page frames and) 307.63 407.27 P
1.08 (ranges from address 0 to the maximum speci\336ed address.) 307.63 395.47 P
0.41 (The page size can be changed when recompiling the simu-) 307.63 383.67 P
(lator) 307.63 371.87 T
(.) 325.41 371.87 T
0.27 (Figure 1 shows the map of the memory model. The \336rst) 319.62 191.82 P
0.42 (two pages of memory are reserved for passing information) 307.63 180.02 P
2.85 (from the simulator to the run-time environment of the) 307.63 168.22 P
1.83 (application program. The instructions and the static data) 307.63 156.42 P
-0.2 (area are put in the bottom of the address space. The top por-) 307.63 144.62 P
1.78 (tion is reserved for the processor stacks. Each processor) 307.63 132.82 P
0.53 (gets a stack area the size of which is de\336ned upon invoca-) 307.63 121.02 P
0.09 (tion of the simulator) 307.63 109.22 P
0.09 (. The area inbetween is allocated to the) 388.72 109.22 P
(dynamic memory area, the heap.) 307.63 97.42 T
304.7 200.29 545.39 368.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
437.02 264.06 479.78 280.69 R
13 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
434.33 261.82 477.09 278.45 R
13 X
V
0 X
N
431.64 259.58 474.41 276.21 R
13 X
V
0 X
N
430.33 273.77 472.43 296.11 R
9 X
V
430.06 312.46 472.16 359.51 R
10 X
V
430.06 257.57 472.16 273.25 R
13 X
V
430.06 234.04 472.16 257.57 R
4 X
V
308 203.15 545.91 216.49 R
7 X
V
5 9 Q
0 X
(Figure 1. Memory map of the simulated memory) 323.76 210.49 T
(.) 527.65 210.49 T
430.06 226.2 472.16 359.51 R
N
1 8 Q
(Addr) 426.85 361.06 T
(ess space) 444.93 361.06 T
430.06 234.04 472.16 234.04 2 L
2 Z
N
430.06 257.57 472.16 257.57 2 L
N
430.06 273.25 472.16 273.25 2 L
N
430.06 312.46 472.16 312.46 2 L
N
430.06 296.78 472.16 296.78 2 L
0.5 H
N
6 F
(Instructions) 485.6 243.09 T
(Static data area) 485.6 264.32 T
(Heap) 485.6 289.56 T
(Stacks) 485.6 326.76 T
425.18 234.98 M
 423.76 236.79 423.76 236.79 423.76 240.41 D
 423.76 244.03 423.76 244.03 423.05 244.93 D
 422.34 245.84 422.34 245.84 423.05 246.74 D
 423.76 247.65 423.76 247.65 423.76 251.26 D
 423.76 254.88 423.76 254.88 425.18 256.69 D
N
474.1 273.89 M
 475.52 277.09 475.52 277.09 475.52 283.47 D
 475.52 289.86 475.52 289.86 476.23 291.46 D
 476.94 293.05 476.94 293.05 476.23 294.65 D
 475.52 296.24 475.52 296.24 475.52 302.63 D
 475.52 309.01 475.52 309.01 474.1 312.21 D
N
425.18 274.94 M
 423.76 276.82 423.76 276.82 423.76 280.58 D
 423.76 284.34 423.76 284.34 423.05 285.28 D
 422.34 286.22 422.34 286.22 423.05 287.16 D
 423.76 288.1 423.76 288.1 423.76 291.86 D
 423.76 295.62 423.76 295.62 425.18 297.5 D
N
425.18 259.18 M
 423.76 260.44 423.76 260.44 423.76 262.95 D
 423.76 265.46 423.76 265.46 423.05 266.08 D
 422.34 266.71 422.34 266.71 423.05 267.34 D
 423.76 267.97 423.76 267.97 423.76 270.48 D
 423.76 272.99 423.76 272.99 425.18 274.24 D
N
425.18 300.64 M
 423.76 305.67 423.76 305.67 423.76 315.75 D
 423.76 325.82 423.76 325.82 423.05 328.34 D
 422.34 330.86 422.34 330.86 423.05 333.38 D
 423.76 335.9 423.76 335.9 423.76 345.97 D
 423.76 356.04 423.76 356.04 425.18 361.08 D
N
(INSTRUCTIONS) 354.53 243.05 T
(PRIV) 302.8 264.13 T
(A) 320.88 264.13 T
(TE_DA) 325.62 264.13 T
(T) 350.81 264.13 T
(A, REPLICA) 355.11 264.13 T
(TED) 398.53 264.13 T
(SHARED_DA) 356.6 282.65 T
(T) 404.9 282.65 T
(A) 409.2 282.65 T
(PRIV) 356.88 327.61 T
(A) 374.96 327.61 T
(TE_DA) 379.71 327.61 T
(T) 404.9 327.61 T
(A) 409.2 327.61 T
1 F
(Memory attributes) 315.23 352.43 T
(Memory areas) 491.16 352.43 T
6 F
(Reserved) 485.6 228.35 T
(MAX) 405.14 353.42 T
(0) 418.03 225.59 T
0.28 0.14 612.28 792.14 C
FMENDPAGE
%%EndPage: "43" 3
%%Page: "44" 4
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(44) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
1.84 (The user \050both the simulator user and the application) 63.86 713.47 P
1.63 (programmer or compiler\051 is provided with primitives for) 51.87 701.67 P
-0.08 (tagging pages with attributes. These attributes are primarily) 51.87 689.87 P
1.67 (used to distinguish pages in one of three sections of the) 51.87 678.07 P
-0.23 (address space:) 51.87 666.27 P
2 F
-0.23 (instructions) 111.39 666.27 P
0 F
-0.23 (,) 158.62 666.27 P
2 F
-0.23 (private data) 163.39 666.27 P
0 F
-0.23 ( and) 211.77 666.27 P
2 F
-0.23 (shar) 230.74 666.27 P
-0.23 (ed data) 248.15 666.27 P
0 F
-0.23 (. A) 277.64 666.27 P
0.95 (particular page may not belong to more than one of these) 51.87 654.47 P
(sections.) 51.87 642.67 T
0.84 (A fourth attribute,) 63.86 630.87 P
2 F
0.84 (r) 141.38 630.87 P
0.84 (eplicated) 144.9 630.87 P
0 F
0.84 (, speci\336es that a processor) 181.56 630.87 P
-0.22 (accessing a page with this attribute will get its own physical) 51.87 619.07 P
1.53 (copy of the page. When a processor \336rst touches a page) 51.87 607.27 P
-0.06 (with the attribute \324replicated\325, a page frame is allocated and) 51.87 595.47 P
0.05 (the contents of the page is copied to the new physical page.) 51.87 583.67 P
1.02 (Subsequent accesses to this page will be redirected to the) 51.87 571.87 P
0.93 (unique physical copy of this page. No coherence is main-) 51.87 560.07 P
0.46 (tained on replicated pages so write operations to them will) 51.87 548.27 P
(only be seen by the same processor that made the write.) 51.87 536.47 T
0.62 (The only exception from the linear address space is the) 63.86 524.67 P
0.91 (static data area which the programming model requires to) 51.87 512.87 P
1.47 (be replicated to all processing elements \050further explana-) 51.87 501.07 P
0.05 (tion in Section 2.4\051. Accesses by dif) 51.87 489.27 P
0.05 (ferent processors to the) 196.44 489.27 P
1.61 (same virtual address in the static data area will result in) 51.87 477.47 P
1.19 (accesses to physically separate memory locations. This is) 51.87 465.67 P
1.08 (achieved by tagging the static data area with the attribute) 51.87 453.87 P
(\324replicated\325.) 51.87 442.07 T
1 11 Q
(2.3  Multipr) 51.87 424.61 T
(ocessor framework) 108.21 424.61 T
0 10 Q
0.17 (The simulation of the execution of a parallel application) 63.86 407.27 P
0.46 (program starts with an initiation phase in which the binary) 51.87 395.47 P
1.27 (image of the application program is read and loaded into) 51.87 383.67 P
-0.16 (the simulated memory) 51.87 371.87 P
-0.16 (. The processors are initiated with the) 140.34 371.87 P
0.05 (start address as stated in the binary \336le. Only processor 0 is) 51.87 360.07 P
0.07 (executing from start and the application program is respon-) 51.87 348.27 P
(sible of invoking the other processors as needed.) 51.87 336.47 T
0.95 (The framework for simulating a shared memory multi-) 63.86 324.67 P
1.08 (processor is an endless loop in which one iteration repre-) 51.87 312.87 P
1.49 (sents one processor cycle, which is the basic measure of) 51.87 301.07 P
(time in the simulator \050see Figure 2\051.) 51.87 289.27 T
0.05 (The \336rst operation in an iteration, is to advance all proc-) 63.86 277.47 P
0.25 (essors having work to do. A time-stamp for each processor) 51.87 265.67 P
-0.06 (determines the earliest time it can proceed. A processor can) 51.87 253.87 P
2.85 (during one iteration issue one instruction fetch and an) 51.87 242.07 P
2.4 (optional data reference, or only the next data reference) 51.87 230.27 P
0.24 (depending on the level of detail simulated. The time-stamp) 51.87 218.47 P
0.33 (for the processor is updated to the earliest time it may pro-) 51.87 206.67 P
-0.07 (ceed. T) 51.87 194.87 P
-0.07 (ogether with this, some operations which can be sat-) 80.53 194.87 P
0.59 (is\336ed within a processor cycle may be done. For example,) 51.87 183.07 P
0.12 (if the latency times of a memory reference can be statically) 51.87 171.27 P
(determined, it may be satis\336ed at this point.) 51.87 159.47 T
0.12 (After all the processors have had the opportunity to pro-) 63.86 147.67 P
-0.12 (ceed, other functional units are scheduled if they have work) 51.87 135.87 P
1.54 (to do during this time step. Examples of such functional) 51.87 124.07 P
0.16 (units are memory buf) 51.87 112.27 P
0.16 (fers and memory modules serving the) 138 112.27 P
0.09 (processors with memory references. Another example is an) 51.87 100.47 P
(interconnection network.) 51.87 88.67 T
307.63 80.93 545.39 720.14 R
7 X
V
0 X
0.12 (The global time is maintained and updated for each iter-) 319.62 432.63 P
1.84 (ation of the loop.One time step represents the minimum) 307.63 420.83 P
(time for one processor cycle.) 307.63 409.03 T
2.26 (The minimal simulator implements a shared memory) 319.62 397.23 P
1.17 (multiprocessor with instantaneous access to memory) 307.63 385.43 P
1.17 (. The) 523.66 385.43 P
(memory references are performed at number 1 in Figure 2.) 307.63 373.63 T
1 11 Q
(2.4  Pr) 307.63 356.16 T
(ogramming envir) 338.29 356.16 T
(onment) 419.67 356.16 T
0 10 Q
1.89 (The programming environment consists of a run-time) 319.62 338.83 P
0.85 (library) 307.63 327.03 P
0.85 (, a generic trap function, a C-compiler and a macro) 333.64 327.03 P
(package used for expressing parallelism.) 307.63 315.23 T
1.77 (A run-time library has been developed to support the) 319.62 303.43 P
0.66 (execution of the application programs. Many of the stand-) 307.63 291.63 P
1.08 (ard run-time library functions such as I/O and the mathe-) 307.63 279.83 P
0.2 (matical functions are implemented using traps as described) 307.63 268.03 P
0.07 (above. Other functions, such as the memory allocation rou-) 307.63 256.23 P
(tines) 307.63 244.43 T
4 F
(malloc) 329.02 244.43 T
0 F
( and) 365.02 244.43 T
4 F
(calloc) 384.46 244.43 T
0 F
( are implemented directly in C.) 420.46 244.43 T
-0.25 (The generic trap function is used for passing information) 319.62 232.63 P
2.36 (from the application program to the simulator and vice) 307.63 220.83 P
0.31 (versa. An example is the tagging of attributes to regions of) 307.63 209.03 P
0.72 (memory mentioned earlier) 307.63 197.23 P
0.72 (. The routines for tagging pages) 414.6 197.23 P
0.24 (with attributes are implemented in the simulation software,) 307.63 185.43 P
0.16 (but can be invoked from the application program by means) 307.63 173.63 P
0.1 (of traps. The tag operation is provided with a trap code and) 307.63 161.83 P
0.33 (the parameters to the tag function are put on the call frame) 307.63 150.03 P
-0.14 (as for any normal function call. When the trap instruction is) 307.63 138.23 P
1.18 (executed, the call frame of this processor is examined by) 307.63 126.43 P
1.39 (the simulator program and a call is made to the function) 307.63 114.63 P
(implementing the association of attributes to memory) 307.63 102.83 T
(.) 520.86 102.83 T
308.18 439.29 544.84 720.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
308.18 439.29 544.84 720.14 R
7 X
0 0 0 1 0 0 0 K
V
432.58 546.86 429.58 541.67 426.58 546.86 3 L
0.5 H
0 Z
0 X
N
429.58 555.87 429.58 541.92 2 L
2 Z
N
392.09 702.42 467.07 716.4 R
7 X
V
1 H
0 Z
0 X
N
6 8 Q
(Initiation) 413.57 706.36 T
354.59 499.98 504.57 514.43 R
7 X
V
0 X
N
(Check if program has reached end) 368.22 504.13 T
392.09 527.63 467.07 542.09 R
7 X
V
0 X
N
(Advance time) 405.35 531.78 T
373.34 472.31 485.82 486.77 R
7 X
V
0 X
N
(Print execution data) 394.23 476.47 T
432.58 691.27 429.58 686.08 426.58 691.27 3 L
0.5 H
N
429.58 702.42 429.58 686.33 2 L
7 X
V
2 Z
0 X
N
432.58 520.27 429.58 515.08 426.58 520.27 3 L
0 Z
N
429.58 527.69 429.58 515.33 2 L
7 X
V
2 Z
0 X
N
432.58 492.81 429.58 487.61 426.58 492.81 3 L
0 Z
N
429.58 499.93 429.58 487.86 2 L
7 X
V
2 Z
0 X
N
424.76 695.84 429.96 692.84 424.76 689.84 3 L
0 Z
N
354.88 507.48 312.17 507.48 312.17 692.84 429.71 692.84 4 L
2 Z
N
433.01 575.69 430.01 570.5 427.01 575.69 3 L
0 Z
N
430.01 584.7 430.01 570.75 2 L
7 X
V
2 Z
0 X
N
368.07 555.81 494.78 571.57 R
7 X
V
1 H
0 Z
0 X
N
(Perform system unique operations) 370.51 561.26 T
7 X
90 450 8.1 7.5 326.4 584.4 G
0.5 H
0 X
90 450 8.1 7.5 326.4 584.4 A
(1) 324.18 580.85 T
7 X
90 450 8.1 7.5 340.24 536.3 G
0 X
90 450 8.1 7.5 340.24 536.3 A
(2) 338.01 532.74 T
362.2 549.1 368.12 550.04 363.6 546.11 362.9 547.6 4 Y
V
348.97 541.1 362.9 547.6 2 L
7 X
V
2 Z
0 X
N
308.18 443.13 542.18 466.31 R
7 X
V
5 9 Q
0 X
(Figure 2. Multiprocessor framework of the) 335.4 460.31 T
(minimal simulator) 386.67 451.31 T
340.02 598.24 487.62 684.8 R
7 X
V
1 H
0 Z
0 X
N
347.6 592.81 495.19 679.37 R
7 X
V
0 X
N
355.17 587.38 502.76 673.94 R
7 X
V
0 X
N
362.74 581.95 510.34 668.51 R
7 X
V
0 X
N
370.82 627.94 500.18 651.55 R
7 X
V
6 8 Q
0 X
(Advance CPU one processor cycle) 373.7 646.22 T
(or to next data reference) 391.92 636.22 T
370.31 591.24 502.77 623.58 R
7 X
V
0 X
N
371.37 594.16 500.05 618.12 R
7 X
V
0 X
(Perform any CPU-specific) 389.7 612.79 T
(operations \050eg. mem. refs.\051) 387.69 602.79 T
370.31 626.87 502.77 659.22 R
N
376.3 599.28 382.3 599.43 377.29 596.13 376.8 597.7 4 Y
V
339.8 586.1 376.8 597.7 2 L
7 X
V
0.5 H
2 Z
0 X
N
0.28 0.14 612.28 792.14 C
FMENDPAGE
%%EndPage: "44" 4
%%Page: "45" 5
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(45) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
-0.18 (The CacheMire test bench supports at the moment paral-) 63.86 713.47 P
0.49 (lel programs written in C using the) 51.87 701.67 P
2 F
0.49 (Single-Pr) 197.23 701.67 P
0.49 (ogram-Multi-) 235.19 701.67 P
0.07 (ple-Data) 51.87 689.87 P
0 F
0.07 ( \050SPMD\051 model of computation [8]. In this model,) 87.42 689.87 P
-0.09 (all processors execute the same program but operate on dif-) 51.87 678.07 P
0.94 (ferent data which is scheduled during run-time. The ANL) 51.87 666.27 P
1.42 (macros from Ar) 51.87 654.47 P
1.42 (gonne National Laboratories are used for) 118.41 654.47 P
0.08 (expressing the parallelism [5]. The machine dependent part) 51.87 642.67 P
-0.02 (of the ANL macro package has been changed to \336t our run-) 51.87 630.87 P
(time environment.) 51.87 619.07 T
2.53 (The de\336nition of the ANL macros speci\336es that the) 63.86 607.27 P
0.34 (static data area be replicated so that each processor gets its) 51.87 595.47 P
0.32 (own physical copy) 51.87 583.67 P
0.32 (. Some programs written using the ANL) 126.86 583.67 P
1.27 (macros have been found relying on the replication of the) 51.87 571.87 P
1.53 (static data area when the parallel threads of computation) 51.87 560.07 P
-0.05 (have been created. The creation of a parallel thread invokes) 51.87 548.27 P
0.78 (a new processor which will inherit the values of the static) 51.87 536.47 P
0.04 (data area as set up by the master processor) 51.87 524.67 P
0.04 (, see Section 2.2.) 221.74 524.67 P
1.45 (This behaviour is ensured by tagging the static data area) 51.87 512.87 P
(with the \324replicated\325 attribute.) 51.87 501.07 T
1 11 Q
(2.5  Using the CacheMir) 51.87 483.61 T
(e test bench) 165.64 483.61 T
0 10 Q
1.65 (Inserting memory system simulators: Detailed simula-) 63.86 466.27 P
-0.16 (tors of memory systems can be inserted in the framework at) 51.87 454.47 P
(positions corresponding to numbers 1 and 2 in Figure 2.) 51.87 442.67 T
1.9 (The memory references are inserted into the memory) 63.86 430.87 P
1.2 (system at number 1. If the modelling of a memory refer-) 51.87 419.07 P
2.07 (ence cannot be done statically) 51.87 407.27 P
2.07 (, the memory reference is) 179.46 407.27 P
1.19 (inserted in a reference buf) 51.87 395.47 P
1.19 (fer and the processor has to be) 160.86 395.47 P
1.91 (stalled until the memory reference is completed. This is) 51.87 383.67 P
1.11 (achieved by keeping the stall-status in the processor state) 51.87 371.87 P
2.9 (which prevents the processor from advancing until the) 51.87 360.07 P
(stall-status is cleared.) 51.87 348.27 T
1.11 (At number 2 in Figure 2, the modelling of other func-) 63.86 336.47 P
-0.16 (tional units is done. The reference buf) 51.87 324.67 P
-0.16 (fers of each processor) 202.65 324.67 P
0.03 (are examined and the actions of the simulated memory sys-) 51.87 312.87 P
0.31 (tem and network, due during this time step, are performed.) 51.87 301.07 P
0.46 (For correct timing a timestamp is associated to each mem-) 51.87 289.27 P
-0.03 (ory reference for determining the earliest time it may arrive) 51.87 277.47 P
(to a functional unit in the simulated architecture.) 51.87 265.67 T
1 F
2.07 (Invoking the simulator:) 63.86 253.87 P
0 F
2.07 ( The simulator software and) 169.13 253.87 P
0.84 (the application programs \050the workload\051 are separate enti-) 51.87 242.07 P
2.46 (ties, in contrast to some other simulation techniques in) 51.87 230.27 P
1.81 (which the simulator software is linked together with the) 51.87 218.47 P
1.43 (application program. Once a simulator program has been) 51.87 206.67 P
1.51 (compiled, any application program which has been com-) 51.87 194.87 P
0.71 (piled with the CacheMire run-time library may be used as) 51.87 183.07 P
(workload.) 51.87 171.27 T
0.92 (Most of the workload programs we use come from the) 63.86 159.47 P
3.01 (Stanford SPLASH-suite of parallel programs [18]. The) 51.87 147.67 P
1.53 (SPLASH-suite is a set of both scienti\336c and engineering) 51.87 135.87 P
-0.04 (applications which have been developed primarily for solv-) 51.87 124.07 P
-0.03 (ing a scienti\336c or engineering problems, not for performing) 51.87 112.27 P
(computer performance evaluation.) 51.87 100.47 T
307.63 80.93 545.39 720.14 R
7 X
V
0 X
0.31 (There are a number of run-time options to the simulator) 319.62 713.47 P
-0.23 (program upon invocation. There are switches for specifying) 307.63 701.67 P
0.11 (the size of the memory) 307.63 689.87 P
0.11 (, the size of the stack each processor) 399.08 689.87 P
2.7 (gets, the number of processors and whether instruction) 307.63 678.07 P
0.36 (fetches are simulated or not. A simulation run is started by) 307.63 666.27 P
1.99 (invoking the simulator with appropriate parameters. Tha) 307.63 654.47 P
1.21 (last parameter should be the full name and parameters of) 307.63 642.67 P
(the application program.) 307.63 630.87 T
0.59 (The next section describes how a detailed memory sys-) 319.62 619.07 P
-0.07 (tem and network simulator easily can be incorporated with-) 307.63 607.27 P
(out sacri\336cing too much performance.) 307.63 595.47 T
1 12 Q
(3) 307.63 577.34 T
(Example of a CC-NUMA simulator) 319.88 577.34 T
0 10 Q
0.66 (In order to demonstrate the \337exibility and ef) 319.62 559.67 P
0.66 (fectiveness) 500.96 559.67 P
1.98 (of the CacheMire test bench, we will now describe one) 307.63 547.87 P
(example of how the test bench has been used.) 307.63 536.07 T
1.2 (As part of a masters thesis project, a detailed memory) 319.62 524.27 P
1.15 (system and network simulator was designed and incorpo-) 307.63 512.47 P
0.49 (rated with the minimal simulator described in the previous) 307.63 500.67 P
0.97 (section [13]. This simulator implements a shared-memory) 307.63 488.87 P
0.95 (cache coherent non-uniform memory access \050CC-NUMA\051) 307.63 477.07 P
2.87 (multiprocessor with a double two-dimensional mesh as) 307.63 465.27 P
0.89 (interconnection network. The cache coherence protocol in) 307.63 453.47 P
2.78 (the CC-NUMA simulator is a full-map write-invalidate) 307.63 441.67 P
0.24 (protocol based on the Stanford DASH multiprocessor [14].) 307.63 429.87 P
(Figure 3 shows the structure of the simulated system.) 307.63 418.07 T
0.79 (The additions made to the minimal simulator were two) 319.62 406.27 P
1.67 (modules implementing the coherent cache memories and) 307.63 394.47 P
-0.06 (the mesh networks. For data references in the shared region) 307.63 382.67 P
2.7 (of the address space, a call to the cache memory was) 307.63 370.87 P
0.96 (inserted at number 1 in Figure 2. The processor is free to) 307.63 359.07 P
-0.04 (advance to the next memory reference if there is a hit in the) 307.63 347.27 P
0.29 (cache memory) 307.63 335.47 P
0.29 (. Otherwise, the processor is stalled until the) 365.86 335.47 P
2.26 (cache block containing the data is fetched to the cache) 307.63 323.67 P
2 (memory according to the cache-coherence protocol. The) 307.63 311.87 P
1.11 (simulator implements the weak ordering memory consist-) 307.63 300.07 P
0.9 (ency model [10] which means that the processor does not) 307.63 288.27 P
1.01 (have to wait for acknowledgement of write operations. In) 307.63 276.47 P
1.87 (this consistency model the processor is allowed to issue) 307.63 264.67 P
1.2 (write operations as long as a synchronisation point is not) 307.63 252.87 P
(encountered.) 307.63 241.07 T
1.08 ( When all processors have been scheduled once \050some) 319.62 229.27 P
-0.22 (may issue a memory reference and some may be stalled due) 307.63 217.47 P
1.67 (to read misses\051, the local memories and the network are) 307.63 205.67 P
1.11 (scheduled. Correct latency times are modelled by tagging) 307.63 193.87 P
2.11 (each buf) 307.63 182.07 P
2.11 (fer entry with a time-stamp and not scheduling) 343.71 182.07 P
1.7 (messages in the network until they are due according to) 307.63 170.27 P
(their time stamp.) 307.63 158.47 T
1 (The CC-NUMA simulator has been used for a number) 319.62 146.67 P
0.32 (of research studies, including a comparison between write-) 307.63 134.87 P
0.33 (invalidate and write-update cache coherence protocols [13,) 307.63 123.07 P
(21].) 307.63 111.27 T
FMENDPAGE
%%EndPage: "45" 5
%%Page: "46" 6
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(46) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
1 12 Q
0 X
(4) 51.87 284.92 T
(Performance of the simulator) 64.12 284.92 T
0 10 Q
0.5 (This section presents some measurements regarding the) 63.86 267.25 P
5.19 (performance of the program-driven simulator in the) 51.87 255.45 P
(CacheMire test bench.) 51.87 243.65 T
1 11 Q
(4.1  Performance measur) 51.87 226.19 T
(ements) 169.59 226.19 T
0 10 Q
2.55 (For measuring the performance of the simulator) 63.86 208.85 P
2.55 (, we) 270.42 208.85 P
4.96 (have used two programs: MP3D from the Stanford) 51.87 197.05 P
0.37 (SPLASH suite [18], and MA) 51.87 185.25 P
0.37 (TMUL which is a simple pro-) 168.07 185.25 P
1.11 (gram multiplying two matrices of \337oating point numbers.) 51.87 173.45 P
1.44 (MP3D is a program simulating a body in a \337ow of very) 51.87 161.65 P
(low-density particles.) 51.87 149.85 T
0.95 (T) 63.86 138.05 P
0.95 (able 1 shows some characteristics of the two applica-) 69.27 138.05 P
0.56 (tions. The numbers on the amount of instructions and data) 51.87 126.25 P
0.84 (references are measured using the minimal simulator with) 51.87 114.45 P
0.66 (16 processing elements. It corresponds to the execution of) 51.87 102.65 P
0.24 (the entire applications including a sequential initiation. For) 51.87 90.85 P
49.96 297.92 289.63 720.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.77 662.96 93.79 699.24 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
105.53 668.14 137.26 694.05 R
7 X
V
0 X
N
73.79 631.86 121.39 647.41 R
7 X
V
0 X
N
6 7 Q
(Main Memory) 77.91 636.84 T
56.77 652.59 137.26 652.59 2 L
7 X
V
4 H
2 Z
0 X
N
73.79 662.96 73.79 652.59 2 L
7 X
V
0.5 H
0 X
N
121.39 668.14 121.39 652.59 2 L
7 X
V
0 X
N
94.95 647.41 94.95 652.59 2 L
7 X
V
0 X
N
(Proc.) 67.11 684.98 T
(with) 69.06 678.26 T
(Cache) 65.17 671.16 T
(Directory) 108.02 683.48 T
(Controller) 108.02 676.57 T
56.77 574.86 93.79 611.13 R
7 X
V
0 Z
0 X
N
105.53 580.04 137.26 605.95 R
7 X
V
0 X
N
73.79 543.75 121.39 559.31 R
7 X
V
0 X
N
(Main Memory) 77.91 548.73 T
56.77 564.49 137.26 564.49 2 L
7 X
V
4 H
2 Z
0 X
N
73.79 574.86 73.79 564.49 2 L
7 X
V
0.5 H
0 X
N
121.39 580.04 121.39 564.49 2 L
7 X
V
0 X
N
94.95 559.31 94.95 564.49 2 L
7 X
V
0 X
N
(Proc.) 67.11 596.88 T
(with) 69.06 590.16 T
(Cache) 65.17 583.06 T
(Directory) 108.02 595.38 T
(Controller) 108.02 588.47 T
179.57 574.86 216.59 611.13 R
7 X
V
0 Z
0 X
N
227.17 580.04 258.9 605.95 R
7 X
V
0 X
N
195.44 543.75 243.04 559.31 R
7 X
V
0 X
N
(Main Memory) 199.55 548.73 T
179.57 564.49 258.9 564.49 2 L
7 X
V
4 H
2 Z
0 X
N
195.44 574.86 195.44 564.49 2 L
7 X
V
0.5 H
0 X
N
243.04 580.04 243.04 564.49 2 L
7 X
V
0 X
N
216.59 559.31 216.59 564.49 2 L
7 X
V
0 X
N
(Proc.) 189.91 596.88 T
(with) 191.86 590.16 T
(Cache) 187.97 583.06 T
(Directory) 229.67 595.38 T
(Controller) 229.67 588.47 T
179.57 662.96 216.59 699.24 R
7 X
V
0 Z
0 X
N
227.17 668.14 258.9 694.05 R
7 X
V
0 X
N
195.44 631.86 243.04 647.41 R
7 X
V
0 X
N
(Main Memory) 199.55 636.84 T
179.57 652.59 258.9 652.59 2 L
7 X
V
4 H
2 Z
0 X
N
195.44 662.96 195.44 652.59 2 L
7 X
V
0.5 H
0 X
N
243.04 668.14 243.04 652.59 2 L
7 X
V
0 X
N
216.59 647.41 216.59 652.59 2 L
7 X
V
0 X
N
(Proc.) 189.91 684.98 T
(with) 191.86 678.26 T
(Cache) 187.97 671.16 T
(Directory) 229.67 683.48 T
(Controller) 229.67 676.57 T
51.46 300.47 289.13 331.6 R
7 X
V
5 9 Q
0 X
(Figure 3.  \050a\051 Block diagram of a) 102.02 325.6 T
(2 x 2 CC-NUMA system.) 119.53 316.6 T
(\050b\051 Structure of a simulated processing node.) 73.27 307.6 T
147.84 704.42 153.13 709.6 R
4 X
V
0 Z
0 X
N
158.41 709.6 163.7 714.78 R
4 X
V
0 X
N
158.41 621.5 163.7 626.68 R
4 X
V
0 X
N
147.84 616.32 153.13 621.5 R
4 X
V
0 X
N
264.19 704.42 269.48 709.6 R
4 X
V
0 X
N
274.77 709.6 280.09 714.78 R
4 X
V
0 X
N
264.19 616.32 269.48 621.5 R
4 X
V
0 X
N
274.77 621.5 280.09 626.68 R
4 X
V
0 X
N
150.33 703.84 150.33 621.69 2 L
4 X
V
1 H
2 Z
0 X
N
160.91 709.6 160.91 625.15 2 L
4 X
V
0 X
N
163.65 711.91 274.53 711.91 2 L
4 X
V
0 X
N
153.08 706.92 264.34 706.92 2 L
4 X
V
0 X
N
267.47 704.61 267.47 620.92 2 L
4 X
V
0 X
N
277.27 709.22 277.27 626.3 2 L
4 X
V
0 X
N
163.65 623.99 274.92 623.99 2 L
4 X
V
0 X
N
153.08 619 264.34 619 2 L
4 X
V
0 X
N
147.84 616.32 137.26 605.95 2 L
4 X
V
0 X
N
158.41 621.5 137.26 605.95 2 L
4 X
V
0 X
N
264.19 616.32 258.9 605.95 2 L
4 X
V
0 X
N
274.77 621.5 258.9 605.95 2 L
4 X
V
0 X
N
264.19 704.42 258.9 694.05 2 L
4 X
V
0 X
N
274.77 709.6 258.9 694.05 2 L
4 X
V
0 X
N
147.84 704.42 137.26 694.05 2 L
4 X
V
0 X
N
158.41 709.6 137.26 694.05 2 L
4 X
V
0 X
N
1 7 Q
(Request Mesh) 193.43 713.41 T
(Reply Mesh) 195.39 700.36 T
142 443.08 173.98 458.69 R
0.5 H
0 Z
N
142 422.27 151.14 437.88 R
N
142 432.67 151.14 432.67 2 L
2 Z
N
142 427.47 151.14 427.47 2 L
N
164.85 422.27 173.98 437.88 R
0 Z
N
164.85 432.67 173.98 432.67 2 L
2 Z
N
164.85 427.47 173.98 427.47 2 L
N
164.85 396.26 173.98 411.86 R
0 Z
N
192.25 422.27 201.39 437.88 R
N
192.25 432.67 201.39 432.67 2 L
2 Z
N
114.59 422.27 123.73 437.88 R
0 Z
N
114.59 432.67 123.73 432.67 2 L
2 Z
N
114.59 427.47 123.73 427.47 2 L
N
192.25 427.47 201.39 427.47 2 L
N
164.85 406.66 173.98 406.66 2 L
N
164.85 401.46 173.98 401.46 2 L
N
142 396.26 151.14 411.86 R
0 Z
N
142 406.66 151.14 406.66 2 L
2 Z
N
142 401.46 151.14 401.46 2 L
N
142 375.45 173.98 391.05 R
0 Z
N
90 450 10.39 10.4 158.45 350.14 A
116.51 411.28 96.32 417.07 116.51 422.86 114.4 417.07 4 Y
V
204.05 422.86 224.23 417.07 204.05 411.28 206.15 417.07 4 Y
V
114.4 417.07 206.15 417.07 2 L
3 H
N
6 8 Q
(Memory) 145.22 447.69 T
(Cache) 147.59 379.29 T
(Proc.) 149.12 346.86 T
148.06 422.27 146.57 417.07 145.08 422.27 146.57 422.27 4 Y
V
146.57 422.27 146.57 422.27 2 L
0.5 H
2 Z
N
167.92 417.07 169.41 422.27 170.9 417.07 169.41 417.07 4 Y
V
169.41 417.07 169.41 417.07 2 L
N
198.31 422.27 196.82 417.07 195.33 422.27 196.82 422.27 4 Y
V
196.82 422.27 196.82 422.27 2 L
N
167.92 411.86 169.41 417.07 170.9 411.86 169.41 411.86 4 Y
V
169.41 411.86 169.41 411.86 2 L
N
148.06 417.07 146.57 411.86 145.08 417.07 146.57 417.07 4 Y
V
146.57 417.07 146.57 417.07 2 L
N
117.67 417.07 119.16 422.27 120.65 417.07 119.16 417.07 4 Y
V
119.16 417.07 119.16 417.07 2 L
N
148.06 396.26 146.57 391.05 145.08 396.26 146.57 396.26 4 Y
V
146.57 396.26 146.57 396.26 2 L
N
167.92 391.05 169.41 396.26 170.9 391.05 169.41 391.05 4 Y
V
169.41 391.05 169.41 391.05 2 L
N
159.39 367.15 157.74 361.38 156.09 367.15 157.74 367.15 4 Y
V
156.09 369.68 157.74 375.45 159.39 369.68 157.74 369.68 4 Y
V
157.74 367.15 157.74 369.68 2 L
0 Z
N
148.06 443.08 146.57 437.88 145.08 443.08 146.57 443.08 4 Y
V
146.57 443.08 146.57 443.08 2 L
2 Z
N
167.92 437.88 169.41 443.08 170.9 437.88 169.41 437.88 4 Y
V
169.41 437.88 169.41 437.88 2 L
N
(Bus) 227.84 414.13 T
151.14 476.61 164.85 507.82 R
7 X
V
0 Z
0 X
N
173.98 507.82 173.98 476.61 183.12 466.2 183.12 518.23 4 Y
7 X
V
0 X
N
142 507.82 132.87 518.23 132.87 466.2 142 476.61 4 Y
7 X
V
0 X
N
142 492.21 151.14 492.21 2 L
7 X
V
2 Z
0 X
N
164.85 492.21 173.98 492.21 2 L
7 X
V
0 X
N
183.12 471.4 196.82 471.4 2 L
7 X
V
0 X
N
198.48 443.4 196.82 437.63 195.17 443.4 196.82 443.4 4 Y
V
196.82 471.4 196.82 443.4 2 L
7 X
V
0 Z
0 X
N
204.76 483.46 210.53 481.81 204.76 480.15 204.76 481.81 4 Y
V
183.12 481.81 204.76 481.81 2 L
7 X
V
0 X
N
204.76 493.87 210.53 492.21 204.76 490.56 204.76 492.21 4 Y
V
183.12 492.21 204.76 492.21 2 L
7 X
V
0 X
N
204.76 504.27 210.53 502.62 204.76 500.96 204.76 502.62 4 Y
V
183.12 502.62 204.76 502.62 2 L
7 X
V
0 X
N
204.76 514.68 210.53 513.02 204.76 511.37 204.76 513.02 4 Y
V
183.12 513.02 204.76 513.02 2 L
7 X
V
0 X
N
127.1 514.68 132.87 513.02 127.1 511.37 127.1 513.02 4 Y
V
127.1 513.02 105.46 513.02 2 L
7 X
V
0 X
N
127.1 504.27 132.87 502.62 127.1 500.96 127.1 502.62 4 Y
V
127.1 502.62 105.46 502.62 2 L
7 X
V
0 X
N
127.1 493.87 132.87 492.21 127.1 490.56 127.1 492.21 4 Y
V
127.1 492.21 105.46 492.21 2 L
7 X
V
0 X
N
127.1 483.46 132.87 481.81 127.1 480.15 127.1 481.81 4 Y
V
127.1 481.81 105.46 481.81 2 L
7 X
V
0 X
N
1 F
(SELECT) 114.67 523.5 T
(ROUTE) 143.78 510.86 T
(FORWARD) 169.41 522.25 T
6 F
(X+) 213.28 510.2 T
(X-) 213.65 499.38 T
(Y+) 212.85 489.3 T
(Y) 213.57 479.39 T
(-) 218.17 479.39 T
(X+) 95.01 510.36 T
(X-) 95.01 500.04 T
(Y+) 94.65 489.3 T
(Y) 95.01 479.39 T
(-) 99.61 479.39 T
5 9 Q
(\050a\051) 149.1 539.22 T
(\050b\051) 96.99 349.44 T
131.6 472.19 117.9 472.19 2 L
7 X
V
2 Z
0 X
N
119.55 444.19 117.9 438.42 116.25 444.19 117.9 444.19 4 Y
V
117.9 472.19 117.9 444.19 2 L
7 X
V
0 Z
0 X
N
0.28 0.14 612.28 792.14 C
307.63 80.93 545.39 720.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
2.13 (MA) 307.63 713.47 P
2.13 (TMUL the initiation phase is less than 10% but for) 322.63 713.47 P
0.07 (MP3D it can be up to 50% of the total execution time. This) 307.63 701.67 P
0.34 (initiation phase grows for MP3D with the number of parti-) 307.63 689.87 P
0.43 (cles but diminishes with the number of time steps.The dis-) 307.63 678.07 P
5.11 (tribution of memory references between instructions,) 307.63 666.27 P
1.21 (private and shared data will of course vary depending on) 307.63 654.47 P
(the con\336guration of the simulated system.) 307.63 642.67 T
0.13 (W) 319.62 399.87 P
0.13 (e have evaluated the performance of the minimal sim-) 328.26 399.87 P
1.77 (ulator) 307.63 388.07 P
1.77 (, which will give us the overhead of the processor) 330.56 388.07 P
0.55 (simulator together with the multiprocessor framework. W) 307.63 376.27 P
0.55 (e) 540.95 376.27 P
1.12 (have also, as a comparison, evaluated the performance of) 307.63 364.47 P
0.94 (the CC-NUMA simulator described in Section 3. In order) 307.63 352.67 P
0.84 (to conduct the performance evaluation we have made two) 307.63 340.87 P
0.59 (sets of experiments. One set in which we vary the number) 307.63 329.07 P
0.25 (of simulated processing elements from 1 to 64, and one set) 307.63 317.27 P
0.83 (where we use the pro\336ling utility of the GCC compiler in) 307.63 305.47 P
1.33 (order to \336nd which parts of the simulator contributes the) 307.63 293.67 P
(most to simulation time.) 307.63 281.87 T
0.36 (All measurements were conducted on a Sun SP) 319.62 270.07 P
0.36 (ARCsta-) 510.39 270.07 P
-0.13 (tion ELC peaking at approximately 25 MIPS. Both the sim-) 307.63 258.27 P
1.39 (ulator and the application programs were compiled using) 307.63 246.47 P
(the GCC compiler and the -O2 optimization \337ag.) 307.63 234.67 T
1 11 Q
(4.2  Results) 307.63 217.21 T
0 10 Q
1.55 (Figure 4 shows the slowdown of the simulated multi-) 319.62 199.87 P
1.12 (processors, compared to execution of the application pro-) 307.63 188.07 P
-0.2 (gram on a Sun SP) 307.63 176.27 P
-0.2 (ARCstation ELC single processor system.) 377.58 176.27 P
0.69 (The slowdown for the minimal simulator ranges from 100) 307.63 164.47 P
1.39 (to 300 depending on the number of simulated processors) 307.63 152.67 P
-0.06 (and application program. This overhead is very small and it) 307.63 140.87 P
1.81 (does not vary appreciably with the number of simulated) 307.63 129.07 P
0.32 (processing elements. The average slowdown is around 200) 307.63 117.27 P
2.99 (which means that on average not more than 200 host) 307.63 105.47 P
2.74 (instructions are needed to simulate an instruction fetch) 307.63 93.67 P
5 9 Q
(T) 351.31 627.34 T
(able 1. Application characteristics) 356.15 627.34 T
0 8 Q
(MP3D) 415.84 609.01 T
(MA) 481.18 609.01 T
(TMUL) 493.18 609.01 T
(code size \050lines\051) 320.51 595.01 T
(1735) 392.51 595.01 T
(1) 464.51 595.01 T
(13) 468.21 595.01 T
(data set) 320.51 578.01 T
(10000 particles) 392.51 583.01 T
(10 time steps) 392.51 573.01 T
(128) 464.51 578.01 T
3 F
(\264) 478.51 578.01 T
0 F
(128 elements) 484.9 578.01 T
(execution time) 320.51 561.01 T
(\050uniprocessor\051) 320.51 551.01 T
(2.6 s) 392.51 556.01 T
(1.5 s) 464.51 556.01 T
(number of) 320.51 539.01 T
(instructions) 320.51 529.01 T
(27.6 \341 10) 392.51 534.01 T
0 6.4 Q
(6) 420.51 537.21 T
0 8 Q
( \05078 %\051) 423.71 534.01 T
(27.5 \341 10) 464.51 534.01 T
0 6.4 Q
(6) 492.51 537.21 T
0 8 Q
( \05076 %\051) 495.71 534.01 T
(number of private) 320.51 517.01 T
(data reads) 320.51 507.01 T
(2.6 \341 10) 392.51 512.01 T
0 6.4 Q
(6) 416.51 515.21 T
0 8 Q
( \0507.5 %\051) 419.71 512.01 T
(17240 \0500.05 %\051) 464.51 512.01 T
(number of private) 320.51 495.01 T
(data writes) 320.51 485.01 T
(1.16 \341 10) 392.51 490.01 T
0 6.4 Q
(6) 420.51 493.21 T
0 8 Q
( \0503.3 %\051) 423.71 490.01 T
(125 \0500.0 %\051) 464.51 490.01 T
(number of shared) 320.51 473.01 T
(data reads) 320.51 463.01 T
(2.47 \341 10) 392.51 468.01 T
0 6.4 Q
(6) 420.51 471.21 T
0 8 Q
( \0507.1 %\051) 423.71 468.01 T
(6.3 \341 10) 464.51 468.01 T
0 6.4 Q
(6) 488.51 471.21 T
0 8 Q
( \05017.5 %\051) 491.71 468.01 T
(number of shared) 320.51 451.01 T
(data writes) 320.51 441.01 T
(1.5 \341 10) 392.51 446.01 T
0 6.4 Q
(6) 416.51 449.21 T
0 8 Q
( \0504.3 %\051) 419.71 446.01 T
(2.1 \341 10) 464.51 446.01 T
0 6.4 Q
(6) 488.51 449.21 T
0 8 Q
( \0505.8 %\051) 491.71 446.01 T
(number of) 320.51 429.01 T
(atomic RMW) 320.51 419.01 T
(16554 \0500.05%\051) 392.51 424.01 T
(684 \0500.0%\051) 464.51 424.01 T
318.51 617.34 318.51 414.59 2 L
V
0.5 H
0 Z
N
390.51 619.34 390.51 414.09 2 L
V
N
462.51 619.34 462.51 414.09 2 L
V
N
534.51 617.34 534.51 414.59 2 L
V
N
318.26 618.34 534.76 618.34 2 L
V
2 H
N
318.26 602.34 534.76 602.34 2 L
V
N
318.26 590.34 534.76 590.34 2 L
V
0.5 H
N
318.26 568.34 534.76 568.34 2 L
V
N
318.26 546.34 534.76 546.34 2 L
V
N
318.26 524.34 534.76 524.34 2 L
V
N
318.26 502.34 534.76 502.34 2 L
V
N
318.26 480.34 534.76 480.34 2 L
V
N
318.26 458.34 534.76 458.34 2 L
V
N
318.26 436.34 534.76 436.34 2 L
V
N
318.26 414.34 534.76 414.34 2 L
V
N
FMENDPAGE
%%EndPage: "46" 6
%%Page: "47" 7
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(47) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
0.56 (\050with address translation\051, the interpretation of the instruc-) 51.87 504.41 P
0.04 (tion, possible data reference \050also with address translation\051,) 51.87 492.61 P
0.33 (reference counting and the framework for multiprocessing.) 51.87 480.81 P
1.53 (The total time for simulating one complete instruction is) 51.87 469.01 P
(about 16) 51.87 457.21 T
3 F
(m) 89.09 457.21 T
0 F
(s \050see T) 94.85 457.21 T
(able 2\051.) 125.25 457.21 T
0.23 (The slowdown for the CC-NUMA simulator is included) 63.86 445.41 P
2.19 (for comparison. The overhead of simulating caches, the) 51.87 433.61 P
0.35 (mesh networks and the cache coherence protocol results in) 51.87 421.81 P
0.45 (a lot higher slowdown as we increase the number of simu-) 51.87 410.01 P
2.48 (lated processors. This memory system simulator suf) 51.87 398.21 P
2.48 (fers) 274.64 398.21 P
0.73 (much from the same ef) 51.87 386.41 P
0.73 (fects as in a real system. When we) 146.8 386.41 P
1.95 (add processing elements the network will at some point) 51.87 374.61 P
-0.23 (become saturated and most of the time will be spent in rout-) 51.87 362.81 P
2.3 (ing messages through the network. Therefore, we get a) 51.87 351.01 P
0.09 (more rapid increase in simulation time when the number of) 51.87 339.21 P
(simulated processors exceed 16.) 51.87 327.41 T
1.3 (T) 63.86 181.61 P
1.3 (able 2 shows the times for performing central opera-) 69.27 181.61 P
0.44 (tions and how they vary between the minimal and the CC-) 51.87 169.81 P
0.47 (NUMA simulator) 51.87 158.01 P
0.47 (. On top of this comes the time for simu-) 122.62 158.01 P
2.33 (lating the memory system. The dif) 51.87 146.21 P
2.33 (ferences between the) 201.12 146.21 P
1.06 (both simulators are in the main loop and in the processor) 51.87 134.41 P
0.05 (simulator) 51.87 122.61 P
0.05 (. The dif) 89.1 122.61 P
0.05 (ference in the main loop is because of the) 123.18 122.61 P
1.88 (additional work which has to be done when more func-) 51.87 110.81 P
-0.12 (tional units are added to the simulator) 51.87 99.01 P
-0.12 (. The dif) 201.71 99.01 P
-0.12 (ference in the) 235.45 99.01 P
-0.21 (average time for simulating the execution of one instruction) 51.87 87.21 P
5 9 Q
(T) 56.89 312.07 T
(able 2. T) 61.72 312.07 T
(ime for performing central operations in the) 97.58 312.07 T
(simulators. 16 simulated processing elements.) 70.96 301.07 T
0 8 Q
(Minimal) 170.3 282.74 T
(simulator) 168.97 272.74 T
(CC-NUMA) 203.19 282.74 T
(simulator) 206.97 272.74 T
(A) 100.54 258.74 T
(verage time for) 105.72 258.74 T
(one instruction) 100.54 248.74 T
(7) 177.22 253.74 T
3 F
(m) 183.22 253.74 T
0 F
(s) 187.83 253.74 T
(8) 215.22 253.74 T
3 F
(m) 221.22 253.74 T
0 F
(s) 225.83 253.74 T
(Address translation) 100.54 236.74 T
(2) 177.22 236.74 T
3 F
(m) 183.22 236.74 T
0 F
(s) 187.83 236.74 T
(2) 215.22 236.74 T
3 F
(m) 221.22 236.74 T
0 F
(s) 225.83 236.74 T
(Memory reference) 100.54 224.74 T
(3) 177.22 224.74 T
3 F
(m) 183.22 224.74 T
0 F
(s) 187.83 224.74 T
(3) 215.22 224.74 T
3 F
(m) 221.22 224.74 T
0 F
(s) 225.83 224.74 T
(Main loop overhead) 100.54 212.74 T
(4) 177.22 212.74 T
3 F
(m) 183.22 212.74 T
0 F
(s) 187.83 212.74 T
(1) 213.37 212.74 T
(1) 217.07 212.74 T
3 F
(m) 223.07 212.74 T
0 F
(s) 227.68 212.74 T
(Sum) 100.54 200.74 T
(16) 175.22 200.74 T
3 F
(m) 185.22 200.74 T
0 F
(s) 189.83 200.74 T
3 F
(24 m) 213.22 200.74 T
0 F
(s) 227.83 200.74 T
98.54 291.07 98.54 196.32 2 L
V
0.5 H
0 Z
N
166.97 293.07 166.97 195.82 2 L
V
N
201.19 293.07 201.19 195.82 2 L
V
N
242.97 291.07 242.97 196.32 2 L
V
N
98.29 292.07 243.22 292.07 2 L
V
2 H
N
98.29 266.07 243.22 266.07 2 L
V
N
98.29 244.07 243.22 244.07 2 L
V
0.25 H
N
98.29 232.07 243.22 232.07 2 L
V
N
98.29 220.07 243.22 220.07 2 L
V
N
98.29 208.07 243.22 208.07 2 L
V
2 H
N
98.29 196.07 243.22 196.07 2 L
V
0.5 H
N
50.16 511.07 289.63 720.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
270 88 126 511 740 168.56 233.36 84.92 518.63 FMBEGINEPSF
%%BeginDocument: /usr/dit/matsbror/00research/00papers/conferences/SIMSYMP93/timing.epsi
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 88 126 511 740
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Informix Wingz Version 1.1A
%%CreationDate: Sun Jan 17 15:19:31 1993
%%For: Mats Brorsson (matsbror)
%%BoundingBox: 27 27 813 566
%%Pages: (atend)
%%EndComments

%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/BIO { /yb exch def /xb exch def bstring yb bwidth mul xb 8 idiv add get 1 7 xb 8 mod sub bitshift and 0 ne } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.333 4.333 SL GS flattenpath pathbbox 2 index sub /height exch cvi def 2
index sub /width exch cvi def /iy exch cvi def /ix exch cvi def GR cliptype cvx exec pndex 1 eq { fgr fgg fgb SC FL } { bgr bgg bgb SC FL pndex 20 ne { fgr fgg fgb SC ix iy TR 0 8
height { /yoff exch def 0 8 width { /xoff exch def GS xoff yoff TR 8 8 true matrix {pats pndex get} imagemask GR } for } for } if } ifelse GR } bind def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont  pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/SF { exch findfont exch [ exch 0 0 2 index neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SS {/freq exch def /bwidth exch def /bpside exch def /pndex exch def /bstring pats pndex get def /onbits 0 def /offbits 0 def freq 0 {/y exch def /x exch def /xindex x 1 add 2 div bpside mul cvi def /yindex y 1
add 2 div bpside mul cvi def yindex xindex BIO {/onbits onbits 1 add def 1} {/offbits offbits 1 add def 0} ifelse} setscreen {} settransfer offbits offbits onbits add div SG} bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [ <00 00 00 00 00 00 00 00> <FF FF FF FF FF FF FF FF> <dd ff 77 ff dd ff 77 ff> <dd 77 dd 77 dd 77 dd 77> <AA 55 AA 55 AA 55 AA 55> <55 ff 55 ff 55 ff 55 ff> <AA AA AA AA AA AA AA AA> <EE DD BB 77 EE DD BB 77>
<88 88 88 88 88 88 88 88> <B1 30 03 1B D8 C0 0C 8D> <80 10 02 20 01 08 40 04> <FF 88 88 88 FF 88 88 88> <FF 80 80 80 FF 08 08 08> <80 00 00 00 00 00 00 00> <80 40 20 00 02 04 08 00> <82 44 39 44 82 01 01 01> <F8 74 22 47 8F 17 22 71>
<55 A0 40 40 55 0A 04 04> <20 50 88 88 88 88 05 02> <BF 00 BF BF B0 B0 B0 B0> <00 00 00 00 00 00 00 00> <80 00 08 00 80 00 08 00> <88 00 22 00 88 00 22 00> <88 22 88 22 88 22 88 22> <AA 00 AA 00 AA 00 AA 00> <FF 00 FF 00 FF 00 FF 00>
<11 22 44 88 11 22 44 88> <FF 00 00 00 FF 00 00 00> <01 02 04 08 10 20 40 80> <AA 00 80 00 88 00 80 00> <FF 80 80 80 80 80 80 80> <08 1C 22 C1 80 01 02 04> <88 14 22 41 88 00 AA 00> <40 A0 00 00 04 0A 00 00> <03 84 48 30 0C 02 01 01>
<80 80 41 3E 08 08 14 E3> <10 20 54 AA FF 02 04 08> <77 89 8F 8F 77 98 F8 F8> <00 08 14 2A 55 2A 14 08> <FF FF FF FF FF FF FF FF> ] def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
1.000 LW
2 setlinecap
0.231 0.231 SL
[-1 0 0 1 121 121] CN 90 RO
1.000 SG
168 111 3234 2221 DR
FL
GS
168 111 3235 2222 CR
GS
348 177 3224 2207 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 78.000 SF
/Helvetica-Wingz 60.667 SF
348 176 3223 2206 DR
FL
/Helvetica-Wingz 78.000 SF
370 209 3141 2136 DR
FL
674 300 3046 1928 DR
FL
741 1928 MT
0.000 SG
741 1928 741 1948 DL
FL
809 1928 MT
809 1928 809 1948 DL
FL
877 1928 MT
877 1928 877 1948 DL
FL
945 1928 MT
945 1928 945 1948 DL
FL
674 1928 MT
674 1928 674 1967 DL
FL
653 2084 MT
(0) SH
1080 1928 MT
1080 1928 1080 1948 DL
FL
1148 1928 MT
1148 1928 1148 1948 DL
FL
1216 1928 MT
1216 1928 1216 1948 DL
FL
1283 1928 MT
1283 1928 1283 1948 DL
FL
1012 1928 MT
1012 1928 1012 1967 DL
FL
969 2084 MT
(10) SH
1419 1928 MT
1419 1928 1419 1948 DL
FL
1487 1928 MT
1487 1928 1487 1948 DL
FL
1555 1928 MT
1555 1928 1555 1948 DL
FL
1623 1928 MT
1623 1928 1623 1948 DL
FL
1351 1928 MT
1351 1928 1351 1967 DL
FL
1308 2084 MT
(20) SH
1758 1928 MT
1758 1928 1758 1948 DL
FL
1826 1928 MT
1826 1928 1826 1948 DL
FL
1894 1928 MT
1894 1928 1894 1948 DL
FL
1961 1928 MT
1961 1928 1961 1948 DL
FL
1690 1928 MT
1690 1928 1690 1967 DL
FL
1647 2084 MT
(30) SH
2097 1928 MT
2097 1928 2097 1948 DL
FL
2165 1928 MT
2165 1928 2165 1948 DL
FL
2233 1928 MT
2233 1928 2233 1948 DL
FL
2300 1928 MT
2300 1928 2300 1948 DL
FL
2029 1928 MT
2029 1928 2029 1967 DL
FL
1986 2084 MT
(40) SH
2436 1928 MT
2436 1928 2436 1948 DL
FL
2504 1928 MT
2504 1928 2504 1948 DL
FL
2571 1928 MT
2571 1928 2571 1948 DL
FL
2639 1928 MT
2639 1928 2639 1948 DL
FL
2368 1928 MT
2368 1928 2368 1967 DL
FL
2325 2084 MT
(50) SH
2775 1928 MT
2775 1928 2775 1948 DL
FL
2843 1928 MT
2843 1928 2843 1948 DL
FL
2910 1928 MT
2910 1928 2910 1948 DL
FL
2978 1928 MT
2978 1928 2978 1948 DL
FL
2707 1928 MT
2707 1928 2707 1967 DL
FL
2664 2084 MT
(60) SH
3046 1928 MT
3046 1928 3046 1967 DL
FL
3003 2084 MT
(70) SH
674 1896 MT
674 1896 654 1896 DL
FL
674 1863 MT
674 1863 654 1863 DL
FL
674 1830 MT
674 1830 654 1830 DL
FL
674 1798 MT
674 1798 654 1798 DL
FL
674 1928 MT
674 1928 635 1928 DL
FL
553 1967 MT
(0) SH
674 1733 MT
674 1733 654 1733 DL
FL
674 1700 MT
674 1700 654 1700 DL
FL
674 1668 MT
674 1668 654 1668 DL
FL
674 1635 MT
674 1635 654 1635 DL
FL
674 1765 MT
674 1765 635 1765 DL
FL
466 1804 MT
(500) SH
674 1570 MT
674 1570 654 1570 DL
FL
674 1537 MT
674 1537 654 1537 DL
FL
674 1505 MT
674 1505 654 1505 DL
FL
674 1472 MT
674 1472 654 1472 DL
FL
674 1602 MT
674 1602 635 1602 DL
FL
423 1641 MT
(1000) SH
674 1407 MT
674 1407 654 1407 DL
FL
674 1374 MT
674 1374 654 1374 DL
FL
674 1342 MT
674 1342 654 1342 DL
FL
674 1309 MT
674 1309 654 1309 DL
FL
674 1440 MT
674 1440 635 1440 DL
FL
423 1479 MT
(1500) SH
674 1244 MT
674 1244 654 1244 DL
FL
674 1212 MT
674 1212 654 1212 DL
FL
674 1179 MT
674 1179 654 1179 DL
FL
674 1147 MT
674 1147 654 1147 DL
FL
674 1277 MT
674 1277 635 1277 DL
FL
423 1316 MT
(2000) SH
674 1082 MT
674 1082 654 1082 DL
FL
674 1049 MT
674 1049 654 1049 DL
FL
674 1016 MT
674 1016 654 1016 DL
FL
674 984 MT
674 984 654 984 DL
FL
674 1114 MT
674 1114 635 1114 DL
FL
423 1153 MT
(2500) SH
674 919 MT
674 919 654 919 DL
FL
674 886 MT
674 886 654 886 DL
FL
674 854 MT
674 854 654 854 DL
FL
674 821 MT
674 821 654 821 DL
FL
674 951 MT
674 951 635 951 DL
FL
423 990 MT
(3000) SH
674 756 MT
674 756 654 756 DL
FL
674 723 MT
674 723 654 723 DL
FL
674 691 MT
674 691 654 691 DL
FL
674 658 MT
674 658 654 658 DL
FL
674 788 MT
674 788 635 788 DL
FL
423 827 MT
(3500) SH
674 593 MT
674 593 654 593 DL
FL
674 560 MT
674 560 654 560 DL
FL
674 528 MT
674 528 654 528 DL
FL
674 495 MT
674 495 654 495 DL
FL
674 626 MT
674 626 635 626 DL
FL
423 665 MT
(4000) SH
674 430 MT
674 430 654 430 DL
FL
674 398 MT
674 398 654 398 DL
FL
674 365 MT
674 365 654 365 DL
FL
674 332 MT
674 332 654 332 DL
FL
674 463 MT
674 463 635 463 DL
FL
423 502 MT
(4500) SH
674 300 MT
674 300 635 300 DL
FL
423 339 MT
(5000) SH
GS
674 300 3047 1929 CR
707 1782 MT
9.00 LW
707 1782 741 1369 DL
FL
741 1369 MT
741 1369 809 1319 DL
FL
809 1319 MT
809 1319 945 1251 DL
FL
945 1251 MT
945 1251 1216 1191 DL
FL
1216 1191 MT
1216 1191 1758 945 DL
FL
1758 945 MT
1758 945 2843 398 DL
FL
2843 398 MT
2843 398 MT
4.00 LW
688 1763 726 1801 DR
SP
FL
722 1350 760 1388 DR
SP
FL
790 1300 828 1338 DR
SP
FL
926 1232 964 1270 DR
SP
FL
1197 1172 1235 1210 DR
SP
FL
1739 926 1777 964 DR
SP
FL
2824 379 2862 417 DR
SP
FL
707 1834 MT
9.00 LW
707 1834 741 1836 DL
FL
741 1836 MT
741 1836 809 1837 DL
FL
809 1837 MT
809 1837 945 1837 DL
FL
945 1837 MT
945 1837 1216 1834 DL
FL
1216 1834 MT
1216 1834 1758 1834 DL
FL
1758 1834 MT
1758 1834 2843 1832 DL
FL
2843 1832 MT
2843 1832 MT
GS
NP
707 1834 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
741 1836 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
809 1837 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
945 1837 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
1216 1834 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
1758 1834 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
GS
NP
2843 1832 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
707 1851 MT
707 1851 741 1724 DL
FL
741 1724 MT
741 1724 809 1691 DL
FL
809 1691 MT
809 1691 945 1668 DL
FL
945 1668 MT
945 1668 1216 1627 DL
FL
1216 1627 MT
1216 1627 1758 1472 DL
FL
1758 1472 MT
1758 1472 2843 963 DL
FL
2843 963 MT
2843 963 MT
683 1851 MT
4.00 LW
683 1851 731 1851 DL
FL
707 1827 MT
707 1827 707 1875 DL
FL
717 1724 MT
717 1724 765 1724 DL
FL
741 1700 MT
741 1700 741 1748 DL
FL
785 1691 MT
785 1691 833 1691 DL
FL
809 1667 MT
809 1667 809 1715 DL
FL
921 1668 MT
921 1668 969 1668 DL
FL
945 1644 MT
945 1644 945 1692 DL
FL
1192 1627 MT
1192 1627 1240 1627 DL
FL
1216 1603 MT
1216 1603 1216 1651 DL
FL
1734 1472 MT
1734 1472 1782 1472 DL
FL
1758 1448 MT
1758 1448 1758 1496 DL
FL
2819 963 MT
2819 963 2867 963 DL
FL
2843 939 MT
2843 939 2843 987 DL
FL
707 1888 MT
9.00 LW
707 1888 741 1888 DL
FL
741 1888 MT
741 1888 809 1887 DL
FL
809 1887 MT
809 1887 945 1886 DL
FL
945 1886 MT
945 1886 1216 1885 DL
FL
1216 1885 MT
1216 1885 1758 1881 DL
FL
1758 1881 MT
1758 1881 2843 1866 DL
FL
2843 1866 MT
2843 1866 MT
690 1871 MT
4.00 LW
690 1871 724 1905 DL
FL
690 1905 MT
690 1905 724 1871 DL
FL
724 1871 MT
724 1871 758 1905 DL
FL
724 1905 MT
724 1905 758 1871 DL
FL
792 1870 MT
792 1870 826 1904 DL
FL
792 1904 MT
792 1904 826 1870 DL
FL
928 1869 MT
928 1869 962 1903 DL
FL
928 1903 MT
928 1903 962 1869 DL
FL
1199 1868 MT
1199 1868 1233 1902 DL
FL
1199 1902 MT
1199 1902 1233 1868 DL
FL
1741 1864 MT
1741 1864 1775 1898 DL
FL
1741 1898 MT
1741 1898 1775 1864 DL
FL
2826 1849 MT
2826 1849 2860 1883 DL
FL
2826 1883 MT
2826 1883 2860 1849 DL
FL
GR
3046 1928 MT
3046 1928 3046 300 DL
FL
674 300 MT
674 300 3046 300 DL
FL
674 1928 MT
674 1928 3046 1928 DL
FL
674 1928 MT
674 1928 674 300 DL
FL
/Helvetica-Wingz 60.667 SF
1.000 SG
693 323 1840 870 DR
FL
0.000 SG
866 435 MT
(MP3D, Minimal simulator) SH
779 405 MT
9.00 LW
779 405 831 405 DL
FL
788 388 MT
4.00 LW
788 388 822 422 DL
FL
788 422 MT
788 422 822 388 DL
FL
866 563 MT
(MP3D, CC-NUMA simulator) SH
779 533 MT
9.00 LW
779 533 831 533 DL
FL
781 533 MT
4.00 LW
781 533 829 533 DL
FL
805 509 MT
805 509 805 557 DL
FL
866 690 MT
(MATMUL, Minimal simulator) SH
779 660 MT
9.00 LW
779 660 831 660 DL
FL
GS
NP
805 660 TR
21.000000 21.000000 SL
0 0 1 0 360 AC
0.047619 0.047619 SL
17.250000 17.250000 SL
0 0 1 0 360 AC
0.057971 0.057971 SL
EF
GR
866 817 MT
(MATMUL, CC-NUMA simulator) SH
779 787 MT
779 787 831 787 DL
FL
4.00 LW
786 768 824 806 DR
SP
FL
GR
/Helvetica-Wingz 60.667 SF
GR
/Helvetica-Wingz 60.667 SF
restore
showpage

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
48.1 515.68 289.98 547.76 R
7 X
0 0 0 1 0 0 0 K
V
5 9 Q
0 X
(Figure 4. Slowdown of simulation of varying number of) 51.52 541.76 T
(processing elements compared to an execution on a) 56.76 532.76 T
(SP) 90.35 523.76 T
(ARCstation ELC single processor) 101.69 523.76 T
(.) 245.22 523.76 T
0.28 0.14 612.28 792.14 C
307.63 80.93 545.39 720.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
1.39 (can be attributed to the changes in dynamically executed) 307.63 713.47 P
(instructions between the two experiments.) 307.63 701.67 T
2.22 (The low overhead of simulating the processors com-) 319.62 689.87 P
1.27 (pares well in performance with other simulation systems,) 307.63 678.07 P
1.23 (such as the T) 307.63 666.27 P
1.23 (ango system from Stanford [9]. T) 363.09 666.27 P
1.23 (ango is an) 502.39 666.27 P
-0.09 (execution-driven simulator \050the application program is exe-) 307.63 654.47 P
0.66 (cuted on the host computer) 307.63 642.67 P
0.66 (,) 418.2 642.67 P
2 F
0.66 (not) 423.86 642.67 P
0 F
0.66 ( by a functional simulator\051) 436.64 642.67 P
1.51 (to which a number of memory system simulators can be) 307.63 630.87 P
3.02 (attached. Depending on the kind of memory simulator) 307.63 619.07 P
0.03 (being used, the amount of overhead varies, but the simplest) 307.63 607.27 P
0.53 (memory model called) 307.63 595.47 P
2 F
0.53 (\322Single-Issue\323) 398.93 595.47 P
0 F
0.53 ( causes at least 20) 458.93 595.47 P
3 F
0.53 (m) 535.73 595.47 P
0 F
0.53 (s) 541.49 595.47 P
2.61 (overhead for each global event being traced [9]. Other) 307.63 583.67 P
1.14 (memory simulators lead to a higher overhead which is in) 307.63 571.87 P
2.96 (the order of 300-700) 307.63 560.07 P
3 F
2.96 (m) 404.47 560.07 P
0 F
2.96 (s because of expensive context) 410.23 560.07 P
0.57 (switches. The global events which can be traced by T) 307.63 548.27 P
0.57 (ango) 525.95 548.27 P
0.24 (are synchronisation operations, accesses to shared data and) 307.63 536.47 P
0.39 (accesses to private data. Instruction fetches are thus invisi-) 307.63 524.67 P
(ble for T) 307.63 512.87 T
(ango.) 341.92 512.87 T
1.17 (Assume that we are only interested in shared data and) 319.62 501.07 P
1.5 (that 17% of the instructions lead to a shared data access) 307.63 489.27 P
1.35 (\050average for MP3D and MA) 307.63 477.47 P
1.35 (TMUL\051. Assume further that) 425.23 477.47 P
2.22 (we are using a host computer which is able to execute) 307.63 465.67 P
1.67 (instructions at an average rate of 20 MIPS. The average) 307.63 453.87 P
0.5 (minimum time for executing one instruction with T) 307.63 442.07 P
0.5 (ango is) 516.27 442.07 P
0.88 (0.17) 307.63 430.27 P
3 F
0.88 (\327) 325.13 430.27 P
0 F
0.88 (20+0.05 = 3.45) 327.63 430.27 P
3 F
0.88 (m) 394.04 430.27 P
0 F
0.88 (s. W) 399.8 430.27 P
0.88 (ith more sophisticated memory) 418.6 430.27 P
(simulators in T) 307.63 418.47 T
(ango, this time is: 0.17) 367.49 418.47 T
3 F
(\327) 458.61 418.47 T
0 F
(300+0.05 = 51) 461.11 418.47 T
3 F
(m) 522.39 418.47 T
0 F
(s.) 528.15 418.47 T
0.31 (The corresponding time for the CacheMire test bench is) 319.62 406.67 P
0.09 (16) 307.63 394.87 P
3 F
0.09 (m) 320.22 394.87 P
0 F
0.09 (s, and in this case) 325.98 394.87 P
2 F
0.09 (all) 399.23 394.87 P
0 F
0.09 ( memory references are observed.) 409.79 394.87 P
0.43 (W) 307.63 383.07 P
0.43 (e can thus conclude that while the CacheMire test bench) 316.27 383.07 P
0.11 (is not as fast as the fastest memory simulator on T) 307.63 371.27 P
0.11 (ango, the) 508.61 371.27 P
1.95 (basic time needed for simulating processor and memory) 307.63 359.47 P
0.12 (references is very well acceptable and less than most of the) 307.63 347.67 P
(published overhead numbers for T) 307.63 335.87 T
(ango.) 444.68 335.87 T
1.72 (Figure 5 breaks down the execution to the most time) 319.62 324.07 P
-0.24 (consuming operations in the simulators. The \336gure includes) 307.63 312.27 P
2.02 (measurements done on the minimal and the CC-NUMA) 307.63 300.47 P
(simulator executing MP3D with 16 processors.) 307.63 288.67 T
0.25 (From Figure 5 we see that even for the minimal simula-) 319.62 276.87 P
0.34 (tor) 307.63 265.07 P
0.34 (, less than 40% of the simulation time is spent interpret-) 318.34 265.07 P
2.18 (ing instructions. For the CC-NUMA simulator it is less) 307.63 253.27 P
307.63 80.93 548.09 245.76 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 64 73 383 91 122.6 7.2 408.23 175.38 FMBEGINEPSF
%%BeginDocument: /usr/dit/matsbror/00research/00papers/conferences/SIMSYMP93/OH2.epsi
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 64 73 383 91
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Informix Wingz Version 1.1A
%%CreationDate: Tue Jan 19 08:34:12 1993
%%For: Mats Brorsson (matsbror)
%%BoundingBox: 28 29 812 564
%%Pages: (atend)
%%EndComments

%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/BIO { /yb exch def /xb exch def bstring yb bwidth mul xb 8 idiv add get 1 7 xb 8 mod sub bitshift and 0 ne } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 1.000 1.000 SL GS flattenpath pathbbox 2 index sub /height exch cvi def 2
index sub /width exch cvi def /iy exch cvi def /ix exch cvi def GR cliptype cvx exec pndex 1 eq { fgr fgg fgb SC FL } { bgr bgg bgb SC FL pndex 20 ne { fgr fgg fgb SC ix iy TR 0 8
height { /yoff exch def 0 8 width { /xoff exch def GS xoff yoff TR 8 8 true matrix {pats pndex get} imagemask GR } for } for } if } ifelse GR } bind def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont  pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/SF { exch findfont exch [ exch 0 0 2 index neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SS {/freq exch def /bwidth exch def /bpside exch def /pndex exch def /bstring pats pndex get def /onbits 0 def /offbits 0 def freq 0 {/y exch def /x exch def /xindex x 1 add 2 div bpside mul cvi def /yindex y 1
add 2 div bpside mul cvi def yindex xindex BIO {/onbits onbits 1 add def 1} {/offbits offbits 1 add def 0} ifelse} setscreen {} settransfer offbits offbits onbits add div SG} bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [ <00 00 00 00 00 00 00 00> <FF FF FF FF FF FF FF FF> <dd ff 77 ff dd ff 77 ff> <dd 77 dd 77 dd 77 dd 77> <AA 55 AA 55 AA 55 AA 55> <55 ff 55 ff 55 ff 55 ff> <AA AA AA AA AA AA AA AA> <EE DD BB 77 EE DD BB 77>
<88 88 88 88 88 88 88 88> <B1 30 03 1B D8 C0 0C 8D> <80 10 02 20 01 08 40 04> <FF 88 88 88 FF 88 88 88> <FF 80 80 80 FF 08 08 08> <80 00 00 00 00 00 00 00> <80 40 20 00 02 04 08 00> <82 44 39 44 82 01 01 01> <F8 74 22 47 8F 17 22 71>
<55 A0 40 40 55 0A 04 04> <20 50 88 88 88 88 05 02> <BF 00 BF BF B0 B0 B0 B0> <00 00 00 00 00 00 00 00> <80 00 08 00 80 00 08 00> <88 00 22 00 88 00 22 00> <88 22 88 22 88 22 88 22> <AA 00 AA 00 AA 00 AA 00> <FF 00 FF 00 FF 00 FF 00>
<11 22 44 88 11 22 44 88> <FF 00 00 00 FF 00 00 00> <01 02 04 08 10 20 40 80> <AA 00 80 00 88 00 80 00> <FF 80 80 80 80 80 80 80> <08 1C 22 C1 80 01 02 04> <88 14 22 41 88 00 AA 00> <40 A0 00 00 04 0A 00 00> <03 84 48 30 0C 02 01 01>
<80 80 41 3E 08 08 14 E3> <10 20 54 AA FF 02 04 08> <77 89 8F 8F 77 98 F8 F8> <00 08 14 2A 55 2A 14 08> <FF FF FF FF FF FF FF FF> ] def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
1.000 LW
2 setlinecap
1.000 1.000 SL
[-1 0 0 1 29 28] CN 90 RO
1.000 SG
0 0 113 382 DR
FL
GS
0 0 114 383 CR
GS
40 18 113 377 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 18.000 SF
-408 18 257 376 DR
FL
33 30 245 364 DR
FL
72 60 MT
(Processor) SH
0.000 SG
45 42 63 60 DR
FL
45 42 63 60 DR
SP
FL
1.000 SG
72 102 MT
(Memory operation) SH
11 8 1 9.375 SS
45 84 63 102 DR
FL
DS
0.000 SG
45 84 63 102 DR
SP
FL
1.000 SG
72 143 MT
(Main loop) SH
2 8 1 9.375 SS
45 125 63 143 DR
FL
DS
0.000 SG
45 125 63 143 DR
SP
FL
1.000 SG
72 185 MT
(Address translation) SH
0.502 SG
45 167 63 185 DR
FL
0.000 SG
45 167 63 185 DR
SP
FL
1.000 SG
72 227 MT
(Reference counting) SH
0.251 SG
45 209 63 227 DR
FL
0.000 SG
45 209 63 227 DR
SP
FL
1.000 SG
72 268 MT
(Network) SH
22 8 1 9.375 SS
45 250 63 268 DR
FL
DS
0.000 SG
45 250 63 268 DR
SP
FL
1.000 SG
72 310 MT
(Cache coherence) SH
26 8 1 9.375 SS
45 292 63 310 DR
FL
DS
0.000 SG
45 292 63 310 DR
SP
FL
1.000 SG
72 352 MT
(Miscellaneous) SH
0.749 SG
45 334 63 352 DR
FL
0.000 SG
45 334 63 352 DR
SP
FL
1.000 SG
-396 30 21 364 DR
FL
-320 51 9 325 DR
FL
-320 325 MT
0.000 SG
-320 325 -320 334 DL
FL
-268 352 MT
(Minimal) SH
-155 325 MT
-155 325 -155 334 DL
FL
-119 352 MT
(CC-NUMA) SH
9 325 MT
9 325 9 334 DL
FL
-320 314 MT
-320 314 -324 314 DL
FL
-320 303 MT
-320 303 -324 303 DL
FL
-320 292 MT
-320 292 -324 292 DL
FL
-320 281 MT
-320 281 -324 281 DL
FL
-320 325 MT
-320 325 -329 325 DL
FL
-364 334 MT
(0\045) SH
-320 259 MT
-320 259 -324 259 DL
FL
-320 248 MT
-320 248 -324 248 DL
FL
-320 237 MT
-320 237 -324 237 DL
FL
-320 226 MT
-320 226 -324 226 DL
FL
-320 270 MT
-320 270 -329 270 DL
FL
-374 279 MT
(20\045) SH
-320 204 MT
-320 204 -324 204 DL
FL
-320 193 MT
-320 193 -324 193 DL
FL
-320 182 MT
-320 182 -324 182 DL
FL
-320 172 MT
-320 172 -324 172 DL
FL
-320 215 MT
-320 215 -329 215 DL
FL
-374 224 MT
(40\045) SH
-320 150 MT
-320 150 -324 150 DL
FL
-320 139 MT
-320 139 -324 139 DL
FL
-320 128 MT
-320 128 -324 128 DL
FL
-320 117 MT
-320 117 -324 117 DL
FL
-320 161 MT
-320 161 -329 161 DL
FL
-374 170 MT
(60\045) SH
-320 95 MT
-320 95 -324 95 DL
FL
-320 84 MT
-320 84 -324 84 DL
FL
-320 73 MT
-320 73 -324 73 DL
FL
-320 62 MT
-320 62 -324 62 DL
FL
-320 106 MT
-320 106 -329 106 DL
FL
-374 115 MT
(80\045) SH
-320 51 MT
-320 51 -329 51 DL
FL
-384 60 MT
(100\045) SH
GS
0 0 1 1 CR
-262 222 -213 325 DR
FL
-262 222 -213 325 DR
SP
FL
-98 271 -49 325 DR
FL
-98 271 -49 325 DR
SP
FL
11 8 1 9.375 SS
-262 155 -213 222 DR
FL
DS
0.000 SG
-262 155 -213 222 DR
SP
FL
11 8 1 9.375 SS
-98 243 -49 271 DR
FL
DS
0.000 SG
-98 243 -49 271 DR
SP
FL
2 8 1 9.375 SS
-262 111 -213 155 DR
FL
DS
0.000 SG
-262 111 -213 155 DR
SP
FL
2 8 1 9.375 SS
-98 192 -49 243 DR
FL
DS
0.000 SG
-98 192 -49 243 DR
SP
FL
0.502 SG
-262 69 -213 111 DR
FL
0.000 SG
-262 69 -213 111 DR
SP
FL
0.502 SG
-98 174 -49 192 DR
FL
0.000 SG
-98 174 -49 192 DR
SP
FL
0.251 SG
-262 56 -213 69 DR
FL
0.000 SG
-262 56 -213 69 DR
SP
FL
0.251 SG
-98 167 -49 174 DR
FL
0.000 SG
-98 167 -49 174 DR
SP
FL
22 8 1 9.375 SS
-262 56 -213 56 DR
FL
DS
0.000 SG
-262 56 -213 56 DR
SP
FL
22 8 1 9.375 SS
-98 115 -49 167 DR
FL
DS
0.000 SG
-98 115 -49 167 DR
SP
FL
26 8 1 9.375 SS
-262 56 -213 56 DR
FL
DS
0.000 SG
-262 56 -213 56 DR
SP
FL
26 8 1 9.375 SS
-98 61 -49 115 DR
FL
DS
0.000 SG
-98 61 -49 115 DR
SP
FL
0.749 SG
-262 51 -213 56 DR
FL
0.000 SG
-262 51 -213 56 DR
SP
FL
0.749 SG
-98 51 -49 61 DR
FL
0.000 SG
-98 51 -49 61 DR
SP
FL
GR
9 325 MT
9 325 9 51 DL
FL
-320 51 MT
-320 51 9 51 DL
FL
-320 325 MT
-320 325 9 325 DL
FL
-320 325 MT
-320 325 -320 51 DL
FL
GR
/Helvetica-Wingz 18.000 SF
GR
/Helvetica-Wingz 18.000 SF
restore
showpage

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
477.79 116.06 545.29 241.9 R
7 X
0 0 0 1 0 0 0 K
V
6 8 Q
0 X
(Miscellaneous) 477.79 236.56 T
(Cache coherence) 477.79 219.96 T
(Network) 477.79 203.36 T
(Ref. counting) 477.79 186.76 T
(Addr. translation) 477.79 170.16 T
(Main loop) 477.79 153.56 T
(Memory operation) 477.79 136.96 T
(Processor) 477.79 120.36 T
270 72 87 383 429 121.29 133.38 316.47 114.45 FMBEGINEPSF
%%BeginDocument: /usr/dit/matsbror/00research/00papers/conferences/SIMSYMP93/OH1.epsi
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 72 87 383 429
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Informix Wingz Version 1.1A
%%CreationDate: Tue Jan 19 09:05:32 1993
%%For: Mats Brorsson (matsbror)
%%BoundingBox: 28 29 812 564
%%Pages: (atend)
%%EndComments

%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/BIO { /yb exch def /xb exch def bstring yb bwidth mul xb 8 idiv add get 1 7 xb 8 mod sub bitshift and 0 ne } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 1.000 1.000 SL GS flattenpath pathbbox 2 index sub /height exch cvi def 2
index sub /width exch cvi def /iy exch cvi def /ix exch cvi def GR cliptype cvx exec pndex 1 eq { fgr fgg fgb SC FL } { bgr bgg bgb SC FL pndex 20 ne { fgr fgg fgb SC ix iy TR 0 8
height { /yoff exch def 0 8 width { /xoff exch def GS xoff yoff TR 8 8 true matrix {pats pndex get} imagemask GR } for } for } if } ifelse GR } bind def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont  pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/SF { exch findfont exch [ exch 0 0 2 index neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SS {/freq exch def /bwidth exch def /bpside exch def /pndex exch def /bstring pats pndex get def /onbits 0 def /offbits 0 def freq 0 {/y exch def /x exch def /xindex x 1 add 2 div bpside mul cvi def /yindex y 1
add 2 div bpside mul cvi def yindex xindex BIO {/onbits onbits 1 add def 1} {/offbits offbits 1 add def 0} ifelse} setscreen {} settransfer offbits offbits onbits add div SG} bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [ <00 00 00 00 00 00 00 00> <FF FF FF FF FF FF FF FF> <dd ff 77 ff dd ff 77 ff> <dd 77 dd 77 dd 77 dd 77> <AA 55 AA 55 AA 55 AA 55> <55 ff 55 ff 55 ff 55 ff> <AA AA AA AA AA AA AA AA> <EE DD BB 77 EE DD BB 77>
<88 88 88 88 88 88 88 88> <B1 30 03 1B D8 C0 0C 8D> <80 10 02 20 01 08 40 04> <FF 88 88 88 FF 88 88 88> <FF 80 80 80 FF 08 08 08> <80 00 00 00 00 00 00 00> <80 40 20 00 02 04 08 00> <82 44 39 44 82 01 01 01> <F8 74 22 47 8F 17 22 71>
<55 A0 40 40 55 0A 04 04> <20 50 88 88 88 88 05 02> <BF 00 BF BF B0 B0 B0 B0> <00 00 00 00 00 00 00 00> <80 00 08 00 80 00 08 00> <88 00 22 00 88 00 22 00> <88 22 88 22 88 22 88 22> <AA 00 AA 00 AA 00 AA 00> <FF 00 FF 00 FF 00 FF 00>
<11 22 44 88 11 22 44 88> <FF 00 00 00 FF 00 00 00> <01 02 04 08 10 20 40 80> <AA 00 80 00 88 00 80 00> <FF 80 80 80 80 80 80 80> <08 1C 22 C1 80 01 02 04> <88 14 22 41 88 00 AA 00> <40 A0 00 00 04 0A 00 00> <03 84 48 30 0C 02 01 01>
<80 80 41 3E 08 08 14 E3> <10 20 54 AA FF 02 04 08> <77 89 8F 8F 77 98 F8 F8> <00 08 14 2A 55 2A 14 08> <FF FF FF FF FF FF FF FF> ] def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
1.000 LW
2 setlinecap
1.000 1.000 SL
[-1 0 0 1 29 28] CN 90 RO
1.000 SG
0 0 413 382 DR
FL
GS
0 0 414 383 CR
GS
42 18 413 377 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 18.000 SF
42 18 702 376 DR
FL
GR
/Helvetica-Wingz 18.000 SF
GS
45 30 413 364 CR
45 30 413 363 DR
FL
121 51 401 324 DR
FL
121 324 MT
0.000 SG
121 324 121 333 DL
FL
161 351 MT
(Minimal) SH
261 324 MT
261 324 261 333 DL
FL
285 351 MT
(CC-NUMA) SH
401 324 MT
401 324 401 333 DL
FL
121 313 MT
121 313 117 313 DL
FL
121 302 MT
121 302 117 302 DL
FL
121 291 MT
121 291 117 291 DL
FL
121 280 MT
121 280 117 280 DL
FL
121 324 MT
121 324 112 324 DL
FL
77 333 MT
(0\045) SH
121 258 MT
121 258 117 258 DL
FL
121 248 MT
121 248 117 248 DL
FL
121 237 MT
121 237 117 237 DL
FL
121 226 MT
121 226 117 226 DL
FL
121 269 MT
121 269 112 269 DL
FL
67 278 MT
(20\045) SH
121 204 MT
121 204 117 204 DL
FL
121 193 MT
121 193 117 193 DL
FL
121 182 MT
121 182 117 182 DL
FL
121 171 MT
121 171 117 171 DL
FL
121 215 MT
121 215 112 215 DL
FL
67 224 MT
(40\045) SH
121 149 MT
121 149 117 149 DL
FL
121 138 MT
121 138 117 138 DL
FL
121 127 MT
121 127 117 127 DL
FL
121 116 MT
121 116 117 116 DL
FL
121 160 MT
121 160 112 160 DL
FL
67 169 MT
(60\045) SH
121 95 MT
121 95 117 95 DL
FL
121 84 MT
121 84 117 84 DL
FL
121 73 MT
121 73 117 73 DL
FL
121 62 MT
121 62 117 62 DL
FL
121 106 MT
121 106 112 106 DL
FL
67 115 MT
(80\045) SH
121 51 MT
121 51 112 51 DL
FL
57 60 MT
(100\045) SH
GS
121 51 402 325 CR
170 221 212 324 DR
FL
170 221 212 324 DR
SP
FL
310 270 352 324 DR
FL
310 270 352 324 DR
SP
FL
11 8 1 9.375 SS
170 155 212 221 DR
FL
DS
0.000 SG
170 155 212 221 DR
SP
FL
11 8 1 9.375 SS
310 243 352 270 DR
FL
DS
0.000 SG
310 243 352 270 DR
SP
FL
2 8 1 9.375 SS
170 110 212 155 DR
FL
DS
0.000 SG
170 110 212 155 DR
SP
FL
2 8 1 9.375 SS
310 192 352 243 DR
FL
DS
0.000 SG
310 192 352 243 DR
SP
FL
0.502 SG
170 69 212 110 DR
FL
0.000 SG
170 69 212 110 DR
SP
FL
0.502 SG
310 174 352 192 DR
FL
0.000 SG
310 174 352 192 DR
SP
FL
0.251 SG
170 56 212 69 DR
FL
0.000 SG
170 56 212 69 DR
SP
FL
0.251 SG
310 166 352 174 DR
FL
0.000 SG
310 166 352 174 DR
SP
FL
22 8 1 9.375 SS
170 56 212 56 DR
FL
DS
0.000 SG
170 56 212 56 DR
SP
FL
22 8 1 9.375 SS
310 115 352 166 DR
FL
DS
0.000 SG
310 115 352 166 DR
SP
FL
26 8 1 9.375 SS
170 56 212 56 DR
FL
DS
0.000 SG
170 56 212 56 DR
SP
FL
26 8 1 9.375 SS
310 61 352 115 DR
FL
DS
0.000 SG
310 61 352 115 DR
SP
FL
0.749 SG
170 51 212 56 DR
FL
0.000 SG
170 51 212 56 DR
SP
FL
0.749 SG
310 51 352 61 DR
FL
0.000 SG
310 51 352 61 DR
SP
FL
GR
401 324 MT
401 324 401 51 DL
FL
121 51 MT
121 51 401 51 DL
FL
121 324 MT
121 324 401 324 DL
FL
121 324 MT
121 324 121 51 DL
FL
GR
GR
/Helvetica-Wingz 18.000 SF
restore
showpage

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
307.38 83.26 544.8 114.18 R
7 X
V
5 9 Q
0 X
(Figure 5. Sources of execution time in the minimal) 318.56 108.18 T
(simulator and CC-NUMA simulator with) 342.08 99.18 T
(16 processing elements.) 373.82 90.18 T
0.28 0.14 612.28 792.14 C
FMENDPAGE
%%EndPage: "47" 7
%%Page: "48" 8
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(48) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
0.58 (than 20%! The main contribution to simulation time is the) 51.87 713.47 P
0.16 (memory system, a conclusion also observed by Davis at al.) 51.87 701.67 P
(in  [9].) 51.87 689.87 T
0.3 (In summary we have seen that it is very well feasible to) 63.86 678.07 P
0.52 (use the approach of program-driven simulation for evalua-) 51.87 666.27 P
1.35 (tion of multiprocessor architectures. The main sources of) 51.87 654.47 P
2.87 (execution time when performing detailed simulation of) 51.87 642.67 P
0.87 (memory systems are besides the processor simulation, the) 51.87 630.87 P
-0.23 (network and the multiprocessor framework \050the main loop\051.) 51.87 619.07 P
1 12 Q
(5) 51.87 600.94 T
-0.21 (The use of CacheMir) 64.12 600.94 P
-0.21 (e test bench in r) 170.93 600.94 P
-0.21 (esear) 251.19 600.94 P
-0.21 (ch) 277.63 600.94 P
0 10 Q
3.36 (This section describes a few projects in which the) 63.86 583.27 P
-0.23 (CacheMire test bench is used as a major tool for the investi-) 51.87 571.47 P
(gations.) 51.87 559.67 T
1 11 Q
(5.1  V) 51.87 542.21 T
(isualisation of data sharing) 78.66 542.21 T
0 10 Q
0.69 (Many researchers have identi\336ed the sharing behaviour) 63.86 524.87 P
2.64 (of shared-memory parallel programs as one of the key) 51.87 513.07 P
1.7 (issues for fast execution. Given a shared memory multi-) 51.87 501.27 P
0.24 (processor architecture, depending on the sharing behaviour) 51.87 489.47 P
(of the workload, the performance can vary drastically) 51.87 477.67 T
(.) 265.6 477.67 T
0.25 (This study [6] uses the CacheMire test bench in a meth-) 63.86 465.87 P
0.28 (odology of capturing and visualising the sharing behaviour) 51.87 454.07 P
0.53 (of parallel applications. The stream of shared memory ref-) 51.87 442.27 P
1.95 (erences generated by the processors are analysed during) 51.87 430.47 P
0.36 (run-time and key parameters describing the sharing behav-) 51.87 418.67 P
(iour of the program are recorded.) 51.87 406.87 T
1 11 Q
(5.2  Evaluation of new cache-coher) 51.87 389.41 T
(ence pr) 214.83 389.41 T
(otocols) 249.15 389.41 T
0 10 Q
-0 (The CacheMire test bench is especially suitable to aid in) 63.86 372.07 P
0.47 (evaluation of new cache-coherence protocols and architec-) 51.87 360.27 P
(tures.) 51.87 348.47 T
1.11 (A number of link-based cache coherence protocols are) 63.86 336.67 P
0.03 (evaluated in [16]. One of them is a new tree-based protocol) 51.87 324.87 P
0.17 (presented in [17]. The minimal simulator in the CacheMire) 51.87 313.07 P
1.25 (test bench has been augmented with a generic contention) 51.87 301.27 P
0.92 (free network, which simulates accurate latency times, and) 51.87 289.47 P
-0.03 (with processor caches which are kept coherent using one of) 51.87 277.67 P
(the evaluated cache-coherence protocols.) 51.87 265.87 T
2.05 (The relative performance dif) 63.86 254.07 P
2.05 (ferences of dif) 184.53 254.07 P
2.05 (ferent net-) 246.21 254.07 P
2.16 (work bandwidths and latencies are evaluated for both a) 51.87 242.27 P
0.29 (write-invalidate and a write-update cache-coherence proto-) 51.87 230.47 P
-0.12 (col in [13]. This study incorporated the augmentation of the) 51.87 218.67 P
-0.19 (minimal simulator with the cache-coherence protocol of the) 51.87 206.87 P
0.32 (Stanford DASH multiprocessor \050see Section 3\051. In contrast) 51.87 195.07 P
0.24 (to the study mentioned above, this memory system simula-) 51.87 183.27 P
0.05 (tor accurately simulates the ef) 51.87 171.47 P
0.05 (fects of contention in the net-) 171.88 171.47 P
(work and memory modules.) 51.87 159.67 T
1 11 Q
(5.3  Experiments with new pr) 51.87 142.21 T
(ocessor ar) 189.78 142.21 T
(chitectur) 236.93 142.21 T
(es) 278.88 142.21 T
0 10 Q
2.14 (A master) 63.86 124.87 P
2.14 (\325) 102.75 124.87 P
2.14 (s thesis project at the department has dealt) 105.53 124.87 P
-0.09 (with the design and evaluation of a non-blocking read algo-) 51.87 113.07 P
1.1 (rithm for a SP) 51.87 101.27 P
1.1 (ARC processor [12]. Normally) 110.65 101.27 P
1.1 (, a processor) 237.17 101.27 P
1.99 (always stalls on a read-miss in the cache memory) 51.87 89.47 P
1.99 (. This) 264.86 89.47 P
307.63 80.93 545.39 720.14 R
7 X
V
0 X
1.76 (project has used the CacheMire test bench to evaluate a) 307.63 713.47 P
(new proposal on how to avoid this problem.) 307.63 701.67 T
1 11 Q
(5.4  T) 307.63 684.21 T
(race generation) 333.4 684.21 T
0 10 Q
2.09 (The minimal simulator has been used in a couple of) 319.62 666.87 P
(projects for generating traces.) 307.63 655.07 T
1 F
-0.05 (Cache-coherence protocols on slotted rings:) 319.62 643.27 P
0 F
-0.05 (A project) 507.95 643.27 P
-0.14 (at the department of Electrical Engineering Systems at Uni-) 307.63 631.47 P
0.75 (versity of Southern California is performing an evaluation) 307.63 619.67 P
0.19 (of cache coherence protocols on a slotted ring. The evalua-) 307.63 607.87 P
1.26 (tion is based on detailed trace driven simulations of both) 307.63 596.07 P
0.01 (the cache coherence protocols and the ring interconnection.) 307.63 584.27 P
1.05 (A variety of cache coherence protocols and ring architec-) 307.63 572.47 P
0.25 (tures are investigated. The CacheMire test bench is used to) 307.63 560.67 P
(generate the traces in this study [3].) 307.63 548.87 T
1 F
1.59 (Instruction mix measurements) 319.62 537.07 P
0 F
1.59 (: The single-processor) 453.34 537.07 P
-0.16 (version of the CacheMire test bench has been used to meas-) 307.63 525.27 P
2.98 (ure the relative occurrences of instructions in ordinary) 307.63 513.47 P
2.24 (sequential programs such as T) 307.63 501.67 P
2.24 (eX, Spice and GCC. The) 436.99 501.67 P
2.25 (information is used in the design and construction of a) 307.63 489.87 P
0.15 (highly-pipelined processor with a tar) 307.63 478.07 P
0.15 (get clock frequency of) 455.25 478.07 P
(500 MHz or more [1].) 307.63 466.27 T
1 12 Q
(6) 307.63 448.14 T
(Summary and conclusions) 319.88 448.14 T
0 10 Q
0.6 (Program-driven simulators are much more \337exible than) 319.62 430.47 P
3.23 (their execution-driven counterparts. They allow experi-) 307.63 418.67 P
-0.15 (ments with dif) 307.63 406.87 P
-0.15 (ferent processor architectures in multiproces-) 364.93 406.87 P
1.63 (sor environments, and let the user control all parameters) 307.63 395.07 P
0.53 (such as processor cycle times and the number of outstand-) 307.63 383.27 P
0.44 (ing references to the memory system. They can also easily) 307.63 371.47 P
-0.09 (be built portable to be used in multi-platform computer net-) 307.63 359.67 P
(works.) 307.63 347.87 T
0.55 (W) 319.62 336.07 P
0.55 (e have shown that with modern computing resources,) 328.26 336.07 P
5.83 (detailed program-driven simulation of multiprocessor) 307.63 324.27 P
1.16 (architectures is indeed a viable approach for performance) 307.63 312.47 P
5.16 (evaluations, in contrast to what has generally been) 307.63 300.67 P
(believed.) 307.63 288.87 T
2.56 (W) 319.62 277.07 P
2.56 (e have in this paper described the CacheMire test) 328.26 277.07 P
1.08 (bench which is based on a program-driven simulator of a) 307.63 265.27 P
2.18 (shared memory multiprocessor) 307.63 253.47 P
2.18 (. The performance of this) 435.31 253.47 P
-0.15 (simulator compares well with the performance of T) 307.63 241.67 P
-0.15 (ango, an) 511.66 241.67 P
0.28 (execution-driven simulator developed and used at Stanford) 307.63 229.87 P
0.71 (University) 307.63 218.07 P
0.71 (. When performing detailed simulation of mem-) 349.2 218.07 P
0.94 (ory systems, the time needed for interpretation of instruc-) 307.63 206.27 P
1.61 (tions, becomes a smaller issue compared to the need for) 307.63 194.47 P
(ef) 307.63 182.67 T
(\336cient simulation of the memory system itself.) 315.22 182.67 T
0.79 (The CacheMire test bench is particularly well suited to) 319.62 170.87 P
2.07 (be used in a computing environment with a network of) 307.63 159.07 P
2.08 (workstations because of its simplicity and portability) 307.63 147.27 P
2.08 (. A) 531.09 147.27 P
0.46 (particular study often requires a series of experiments, and) 307.63 135.47 P
1.12 (in a networked environment each experiment can be sub-) 307.63 123.67 P
3.4 (mitted to dif) 307.63 111.87 P
3.4 (ferent workstations thus achieving a high) 363.7 111.87 P
(degree of parallelism in the experiments.) 307.63 100.07 T
FMENDPAGE
%%EndPage: "48" 8
%%Page: "49" 9
612.57 792.28 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.28 27.14 540.28 45.14 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(49) 292.28 38.47 T
51.87 80.93 289.63 720.14 R
7 X
V
0 X
0.14 (The CacheMire test bench has been used in a number of) 63.86 713.47 P
0.53 (studies and has proved itself to be a powerful tool for per-) 51.87 701.67 P
-0.1 (formance evaluations. The test bench supplies the user with) 51.87 689.87 P
0.83 (a minimal simulator with no simulation of a memory sys-) 51.87 678.07 P
-0.17 (tem. This has to be added by the user and can in its simplest) 51.87 666.27 P
2.06 (form consist of analytical computation of latency times.) 51.87 654.47 P
-0.19 (Experiences from several research projects have shown that) 51.87 642.67 P
-0.05 (it is easy to add a memory system to the minimal simulator) 51.87 630.87 P
-0.05 (.) 287.13 630.87 P
0.08 (In spite of the ef) 63.86 619.07 P
0.08 (fectiveness of the CacheMire test bench) 129.55 619.07 P
-0.12 (its main drawback is just the need for computational power) 51.87 607.27 P
-0.12 (.) 287.13 607.27 P
1.76 (Many interesting experiments are too time-consuming in) 51.87 595.47 P
-0.18 (order to be practical to perform, e.g. experiments on operat-) 51.87 583.67 P
1.78 (ing systems. The solution to this is not other simulation) 51.87 571.87 P
-0.23 (techniques such as execution-driven simulation. Rather will) 51.87 560.07 P
0.87 (the development of new high-performance and cost-ef) 51.87 548.27 P
0.87 (fec-) 274.09 548.27 P
0 (tive computing resources lead to the feasibility of program-) 51.87 536.47 P
(driven simulation also in this area.) 51.87 524.67 T
1 12 Q
(Acknowledgements) 51.87 505.54 T
0 10 Q
0.32 (Magnus Karlsson is gratefully acknowledged for imple-) 63.86 486.87 P
(menting the CC-NUMA simulator) 51.87 475.07 T
(.) 188.82 475.07 T
3.48 (This work was supported by the Swedish National) 63.86 463.27 P
1.7 (Board for Industrial and T) 51.87 451.47 P
1.7 (echnical Development \050Nutek\051) 162.94 451.47 P
(under contract number 9001797.) 51.87 439.67 T
1 12 Q
(Refer) 51.87 420.54 T
(ences) 80.3 420.54 T
0 10 Q
([1]) 51.87 401.87 T
-0.21 (P) 70.51 401.87 P
-0.21 (. Andersson et al.,) 74.96 401.87 P
2 F
-0.21 (A Superpipelined Strategy for High) 148.82 401.87 P
2.14 (Speed CMOS Micr) 70.5 390.07 P
2.14 (opr) 149.95 390.07 P
2.14 (ocessors) 163.46 390.07 P
0 F
2.14 (. T) 197.9 390.07 P
2.14 (ech. Rep., Dept of) 210.45 390.07 P
2.96 (Comp. Eng., Lund University) 70.5 378.27 P
2.96 (, Box 1) 197.61 378.27 P
2.96 (18, S-221 00) 232.32 378.27 P
(Lund, Sweden, Nov) 70.5 366.47 T
(. 1992.) 149.84 366.47 T
([2]) 51.87 354.67 T
0.21 (T) 70.51 354.67 P
0.21 (. S. Axelrod, P) 75.88 354.67 P
0.21 (. Dubois, and P) 134.29 354.67 P
0.21 (. A. Elgroth. A Simula-) 195.19 354.67 P
0.56 (tor for MIMD Performance Prediction.) 70.5 342.87 P
2 F
0.56 (Parallel Com-) 231.57 342.87 P
(puting.) 70.5 331.07 T
0 F
(pp 1237-274, 1984.) 101.06 331.07 T
([3]) 51.87 319.27 T
2.12 (L. A. Barroso and M. Dubois) 70.51 319.27 P
2 F
2.12 (, The Performance of) 198.29 319.27 P
3.81 (Cache-Coher) 70.5 307.47 P
3.81 (ent Ring-based Multipr) 124.01 307.47 P
3.81 (ocessors) 224.59 307.47 P
0 F
3.81 (. T) 259.03 307.47 P
3.81 (ech.) 273.25 307.47 P
0.25 (Report, Dept. of EE-Systems, Univ) 70.5 295.67 P
0.25 (. of S. Calif., USA,) 212.23 295.67 P
(Nov) 70.5 283.87 T
(., 1992) 87.07 283.87 T
([4]) 51.87 272.07 T
1.25 (R. Bedichek. Some Ef) 70.51 272.07 P
1.25 (\336cient Architecture Simulation) 163.25 272.07 P
1.26 (T) 70.5 260.27 P
1.26 (echniques.) 75.91 260.27 P
2 F
1.26 (Pr) 122.16 260.27 P
1.26 (oc. of USENIX 1990 W) 131.79 260.27 P
1.26 (inter Conf.) 228.77 260.27 P
0 F
1.26 (, pp) 273.37 260.27 P
(53-63. 1990.) 70.5 248.47 T
([5]) 51.87 236.67 T
1 (J. Boyle et al. Portable Programs for Parallel Proces-) 70.51 236.67 P
(sors. Holt, Rinehart, and W) 70.5 224.87 T
(inston Inc. 1987.) 179.81 224.87 T
([6]) 51.87 213.07 T
2.27 (M. Brorsson, and P) 70.51 213.07 P
2.27 (. Stenstr\232m. V) 153.7 213.07 P
2.27 (isualising Sharing) 215.41 213.07 P
-0.09 (Behaviour in relation to Shared Memory Management.) 70.5 201.27 P
2 F
1 (Pr) 70.5 189.47 P
1 (oc. Int. Conf. on Parallel and Distributed Systems) 80.13 189.47 P
0 F
1 (,) 287.13 189.47 P
(pp 528-536, Hsinchu, T) 70.5 177.67 T
(aiwan, Dec. 1992.) 165.07 177.67 T
([7]) 51.87 165.87 T
1.38 (F) 70.51 165.87 P
1.38 (. Dahlgren. A Program-driven Simulation Model of) 75.27 165.87 P
0.32 (an MIMD Multiprocessor) 70.5 154.07 P
0.32 (.) 173.91 154.07 P
2 F
0.32 (Pr) 179.23 154.07 P
0.32 (oc. of the 24th Ann. Sim-) 188.86 154.07 P
(ulation Symp.) 70.5 142.27 T
0 F
(, pp 40-49. 1991.) 125.5 142.27 T
([8]) 51.87 130.47 T
0.46 (F) 70.51 130.47 P
0.46 (. Darema et al. A single-program-multiple-data com-) 75.27 130.47 P
5.84 (putational model for EPEX/FOR) 70.5 118.67 P
5.84 (TRAN.) 218.79 118.67 P
2 F
5.84 (Parallel) 256.85 118.67 P
(Computing.) 70.5 106.87 T
0 F
(7\0501\051:1) 119.95 106.87 T
(1-24, April, 1988.) 144.02 106.87 T
307.63 80.93 545.39 720.14 R
7 X
V
0 X
([9]) 307.63 713.47 T
0.63 (H. Davis, S. R. Goldschmidt, and J. Hennessy) 326.27 713.47 P
0.63 (. Multi-) 514.19 713.47 P
1.02 (processor Simulation and T) 326.25 701.67 P
1.02 (racing using T) 439.24 701.67 P
1.02 (ango.) 498.35 701.67 P
2 F
1.02 (Pr) 523.82 701.67 P
1.02 (oc.) 533.45 701.67 P
(of the 1991 Conf. on Parallel Pr) 326.25 689.87 T
(oc.) 455.61 689.87 T
0 F
(, pp 99-107. 1991.) 467.55 689.87 T
([10]) 307.63 678.07 T
2.72 (M. Dubois, Christoph Scheurich, and Fay\216 Briggs.) 326.27 678.07 P
1.34 (Memory access buf) 326.25 666.27 P
1.34 (fering in multiprocessor) 407.07 666.27 P
1.34 (. In) 505.3 666.27 P
2 F
1.34 (Pr) 523.82 666.27 P
1.34 (oc.) 533.45 666.27 P
1.12 (of the 13th Ann. Int. Symp. on Comp. Ar) 326.25 654.47 P
1.12 (ch.) 495.38 654.47 P
0 F
1.12 (, pp 434-) 507.32 654.47 P
(442, 1986.) 326.25 642.67 T
([1) 307.63 630.87 T
(1]) 315.59 630.87 T
2.33 (D. Ferrari.) 326.27 630.87 P
2 F
2.33 (Computer Systems Performance Evalua-) 375.36 630.87 P
(tion.) 326.25 619.07 T
0 F
(Prentice Hall, 1978.) 346.81 619.07 T
([12]) 307.63 607.27 T
2.08 (D. Gullber) 326.27 607.27 P
2.08 (g.) 370.94 607.27 P
2 F
2.08 (A Non-Blocking Read Algorithm for a) 383.02 607.27 P
1.16 (SP) 326.25 595.47 P
1.16 (ARC pr) 336.07 595.47 P
1.16 (ocessor \321 Implementation and Evaluation) 367.14 595.47 P
0 F
1.16 (.) 542.89 595.47 P
1.97 (T) 326.25 583.67 P
1.97 (ech. Rep., Dept. of Comp. Eng., Lund Univ) 331.66 583.67 P
1.97 (., Box) 519.24 583.67 P
(1) 326.25 571.87 T
(18, S-221 00 Lund, Sweden, Jan. 1992. MSc thesis) 330.88 571.87 T
([13]) 307.63 560.07 T
1.15 (M. Karlsson.) 326.27 560.07 P
2 F
1.15 (Bandwidth and Latency Implications of) 383.01 560.07 P
4.46 (Dir) 326.25 548.27 P
4.46 (ectory-Based Cache Coher) 339.77 548.27 P
4.46 (ence Policies.) 456.64 548.27 P
0 F
4.46 (T) 523.6 548.27 P
4.46 (ech.) 529.01 548.27 P
0.4 (Rep., Dept of Comp. Eng., Lund University) 326.25 536.47 P
0.4 (, Box 1) 503.28 536.47 P
0.4 (18,) 532.89 536.47 P
(S-221 00 Lund, Sweden, Aug. 1992. MSc thesis) 326.25 524.67 T
([14]) 307.63 512.87 T
0.38 (D. E. Lenoski et al., The directory-based cache coher-) 326.27 512.87 P
1.09 (ence protocol for the DASH multiprocessor) 326.25 501.07 P
1.09 (. In) 505.82 501.07 P
2 F
1.09 (Pr) 523.82 501.07 P
1.09 (oc.) 533.45 501.07 P
1.12 (of the 17th Ann. Int. Symp. on Comp. Ar) 326.25 489.27 P
1.12 (ch.) 495.38 489.27 P
0 F
1.12 (, pp 148-) 507.32 489.27 P
(159, May 1990.) 326.25 477.47 T
([15]) 307.63 465.67 T
1.38 (R. Mukherjee., and J. Bennet. Simulation of Parallel) 326.27 465.67 P
-0 (Computer Systems on a Shared  Memory Multiproces-) 326.25 453.87 P
0.15 (sor) 326.25 442.07 P
0.15 (.) 337.92 442.07 P
2 F
0.15 (Pr) 343.08 442.07 P
0.15 (oc. of the 23r) 352.71 442.07 P
0.15 (d Hawaii Int. Conf. on System Sci-) 406.13 442.07 P
(ences) 326.25 430.27 T
0 F
(. Jan. 1990.) 348.46 430.27 T
([16]) 307.63 418.47 T
0.41 (H. Nilsson, and P) 326.27 418.47 P
0.41 (. Stenstr\232m. Performance Evaluation) 396.67 418.47 P
1.64 (of Link-Based Cache Coherence  Schemes.) 326.25 406.67 P
2 F
1.64 (Pr) 511.89 406.67 P
1.64 (oc. of) 521.52 406.67 P
(the 26th Hawaii Int. Conf. on System Sciences) 326.25 394.87 T
0 F
(. 1993.) 510.96 394.87 T
([17]) 307.63 383.07 T
0.35 (H. Nilsson, and P) 326.27 383.07 P
0.35 (. Stenstr\232m. Scalable T) 396.49 383.07 P
0.35 (ree Protocol -) 490.25 383.07 P
0.73 (A Cache Coherence Approach for Lar) 326.25 371.27 P
0.73 (ge-Scale Multi-) 482.17 371.27 P
1.27 (processors.) 326.25 359.47 P
2 F
1.27 (4th IEEE Symp. on Parallel and Distrib-) 374.73 359.47 P
(uted  Pr) 326.25 347.67 T
(ocessing) 358.1 347.67 T
0 F
(. Dec. 1992.) 392.54 347.67 T
([18]) 307.63 335.87 T
2.37 (J. P) 326.27 335.87 P
2.37 (. Singh, W) 341.98 335.87 P
2.37 (-D. W) 388.94 335.87 P
2.37 (eber) 415.5 335.87 P
2.37 (, and A. Gupta. SPLASH:) 432.31 335.87 P
5.03 (Stanford parallel applications for shared-memory) 326.25 324.07 P
5.03 (.) 542.89 324.07 P
5.63 (Computer Architecture News, 20\0501\051:5-44, March) 326.25 312.27 P
(1992.) 326.25 300.47 T
([19]) 307.63 288.67 T
0.07 (K. So, F) 326.27 288.67 P
0.07 (. Darema-Rogers, D. A. Geor) 358.94 288.67 P
0.07 (ge, V) 476.77 288.67 P
0.07 (. A. Norton,) 497.2 288.67 P
-0.03 (and G. F) 326.25 276.87 P
-0.03 (. P\336ster) 360.11 276.87 P
-0.03 (.) 390.08 276.87 P
2 F
-0.03 (PSIMUL - A System for Parallel Sim-) 395.05 276.87 P
0.69 (ulation  of the Execution of Parallel Pr) 326.25 265.07 P
0.69 (ograms.) 487.08 265.07 P
0 F
0.69 (T) 522.77 265.07 P
0.69 (ech-) 528.18 265.07 P
1.97 (nical Report RC 1) 326.25 253.27 P
1.97 (1674, IBM T) 404.3 253.27 P
1.97 (. J. W) 460.01 253.27 P
1.97 (atson Reseach) 486.48 253.27 P
(Center) 326.25 241.47 T
(, Y) 352.51 241.47 T
(orktown  Heights, 1986.) 363.73 241.47 T
([20]) 307.63 229.67 T
1.53 (SP) 326.27 229.67 P
1.53 (ARC International.) 336.47 229.67 P
2 F
1.53 (The SP) 418.68 229.67 P
1.53 (ARC Ar) 447.53 229.67 P
1.53 (chitectur) 480.08 229.67 P
1.53 (e Man-) 515.26 229.67 P
0.29 (ual, V) 326.25 217.87 P
0.29 (ersion 8.) 349.32 217.87 P
0 F
0.29 (SP) 387.39 217.87 P
0.29 (ARC International Inc., 535 Middle-) 397.59 217.87 P
(\336eld Rd, Suite 210, Menlo Park, Ca 94025., 1991.) 326.25 206.07 T
([21]) 307.63 194.27 T
0.37 (P) 326.27 194.27 P
0.37 (. Stenstr\232m, M. Brorsson and L. Sandber) 330.72 194.27 P
0.37 (g,) 496.61 194.27 P
2 F
0.37 ( An Adap-) 504.11 194.27 P
0.91 (tive Cache Coher) 326.25 182.47 P
0.91 (ence Pr) 397.69 182.47 P
0.91 (otocol Optimized for Migra-) 429.05 182.47 P
0.81 (tory Sharing) 326.25 170.67 P
0 F
0.81 (. T) 377.35 170.67 P
0.81 (ech. Rep., Dept. of Comp. Eng., Lund) 388.57 170.67 P
1.86 (University) 326.25 158.87 P
1.86 (, Box 1) 367.82 158.87 P
1.86 (18, S-221 00 Lund, Sweden, Nov) 400.35 158.87 P
1.86 (.) 542.89 158.87 P
(1992. Submitted for publication.) 326.25 147.07 T
([22]) 307.63 135.27 T
0.91 (C. B. Stunkel, and W) 326.27 135.27 P
0.91 (. K. Fuchs. TRAPEDS: Produc-) 414.26 135.27 P
1.22 (ing T) 326.25 123.47 P
1.22 (races for Multicomputers V) 348.52 123.47 P
1.22 (ia Execution Driven) 462.4 123.47 P
12 (Simulation,.) 326.25 111.67 P
2 F
12 (Performance Evaluation Review) 389.65 111.67 P
12 (.) 542.89 111.67 P
0 F
2.47 (17\0501\051:70-78, May) 326.25 99.87 P
2.47 (, 1989. Proc. of 1989 ACM SIG-) 399.17 99.87 P
(METRICS and Performance '89.) 326.25 88.07 T
FMENDPAGE
%%EndPage: "49" 9
%%Trailer
%%BoundingBox: 0 0 612.57 792.28
%%PageOrder: Ascend
%%Pages: 9
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Symbol
%%+ Courier
%%+ Helvetica-Bold
%%+ Helvetica
%%EOF
